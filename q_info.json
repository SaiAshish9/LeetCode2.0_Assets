{
  "critical_connections_in_a_network": {
    "qno": 1192,
    "title": "Critical Connections in a Network",
    "tags": [
      "Depth-First Search",
      "Graph",
      "Biconnected Component"
    ],
    "default": "Biconnected Component",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 55.7
  },
  "implement_rand10()_using_rand7()": {
    "qno": 470,
    "title": "Implement Rand10() Using Rand7()",
    "tags": [
      "Math",
      "Rejection Sampling",
      "Randomized",
      "Probability And Statistics"
    ],
    "default": "Rejection Sampling",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 45.9
  },
  "generate_random_point_in_a_circle": {
    "qno": 478,
    "title": "Generate Random Point in a Circle",
    "tags": [
      "Math",
      "Geometry",
      "Rejection Sampling",
      "Randomized"
    ],
    "default": "Rejection Sampling",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 39.8
  },
  "maximum_gap": {
    "qno": 164,
    "title": "Maximum Gap",
    "tags": [
      "Array",
      "Sorting",
      "Bucket Sort",
      "Radix Sort"
    ],
    "default": "Radix Sort",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 46.3
  },
  "sort_an_array": {
    "qno": 912,
    "title": "Sort an Array",
    "tags": [
      "Array",
      "Divide and Conquer",
      "Sorting",
      "Heap (Priority Queue)",
      "Merge Sort",
      "Bucket Sort",
      "Radix Sort",
      "Counting Sort"
    ],
    "default": "Radix Sort",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 56.3
  },
  "query_kth_smallest_trimmed_number": {
    "qno": 2343,
    "title": "Query Kth Smallest Trimmed Number",
    "tags": [
      "Array",
      "String",
      "Divide and Conquer",
      "Sorting",
      "Heap (Priority Queue)",
      "Radix Sort",
      "Quickselect"
    ],
    "default": "Radix Sort",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 46.1
  },
  "reconstruct_itinerary": {
    "qno": 332,
    "title": "Reconstruct Itinerary",
    "tags": [
      "Depth-First Search",
      "Graph",
      "Eulerian Circuit"
    ],
    "default": "Eulerian Circuit",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 43.2
  },
  "cracking_the_safe": {
    "qno": 753,
    "title": "Cracking the Safe",
    "tags": [
      "Depth-First Search",
      "Graph",
      "Eulerian Circuit"
    ],
    "default": "Eulerian Circuit",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 56.9
  },
  "valid_arrangement_of_pairs": {
    "qno": 2097,
    "title": "Valid Arrangement of Pairs",
    "tags": [
      "Depth-First Search",
      "Graph",
      "Eulerian Circuit"
    ],
    "default": "Eulerian Circuit",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 43.2
  },
  "find_critical_and_pseudo-critical_edges_in_minimum_spanning_tree": {
    "qno": 1489,
    "title": "Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree",
    "tags": [
      "Union Find",
      "Graph",
      "Sorting",
      "Minimum Spanning Tree",
      "Strongly Connected Component"
    ],
    "default": "Strongly Connected Component",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 67.7
  },
  "minimum_number_of_days_to_disconnect_island": {
    "qno": 1568,
    "title": "Minimum Number of Days to Disconnect Island",
    "tags": [
      "Array",
      "Depth-First Search",
      "Breadth-First Search",
      "Matrix",
      "Strongly Connected Component"
    ],
    "default": "Strongly Connected Component",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 45.0
  },
  "minimum_edge_weight_equilibrium_queries_in_a_tree": {
    "qno": 2846,
    "title": "Minimum Edge Weight Equilibrium Queries in a Tree",
    "tags": [
      "Array",
      "Tree",
      "Graph",
      "Strongly Connected Component"
    ],
    "default": "Strongly Connected Component",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 43.8
  },
  "linked_list_random_node": {
    "qno": 382,
    "title": "Linked List Random Node",
    "tags": [
      "Linked List",
      "Math",
      "Reservoir Sampling",
      "Randomized"
    ],
    "default": "Reservoir Sampling",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 63.2
  },
  "random_pick_index": {
    "qno": 398,
    "title": "Random Pick Index",
    "tags": [
      "Hash Table",
      "Math",
      "Reservoir Sampling",
      "Randomized"
    ],
    "default": "Reservoir Sampling",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 63.4
  },
  "random_flip_matrix": {
    "qno": 519,
    "title": "Random Flip Matrix",
    "tags": [
      "Hash Table",
      "Math",
      "Reservoir Sampling",
      "Randomized"
    ],
    "default": "Reservoir Sampling",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 41.9
  },
  "random_point_in_non-overlapping_rectangles": {
    "qno": 497,
    "title": "Random Point in Non-overlapping Rectangles",
    "tags": [
      "Array",
      "Math",
      "Binary Search",
      "Reservoir Sampling",
      "Prefix Sum",
      "Ordered Set",
      "Randomized"
    ],
    "default": "Reservoir Sampling",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 40.0
  },
  "the_skyline_problem": {
    "qno": 218,
    "title": "The Skyline Problem",
    "tags": [
      "Array",
      "Divide and Conquer",
      "Binary Indexed Tree",
      "Segment Tree",
      "Line Sweep",
      "Heap (Priority Queue)",
      "Ordered Set"
    ],
    "default": "Line Sweep",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 42.7
  },
  "perfect_rectangle": {
    "qno": 391,
    "title": "Perfect Rectangle",
    "tags": [
      "Array",
      "Line Sweep"
    ],
    "default": "Line Sweep",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 33.8
  },
  "rectangle_area_ii": {
    "qno": 850,
    "title": "Rectangle Area II",
    "tags": [
      "Array",
      "Segment Tree",
      "Line Sweep"
    ],
    "default": "Line Sweep",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 54.2
  },
  "minimum_interval_to_include_each_query": {
    "qno": 1851,
    "title": "Minimum Interval to Include Each Query",
    "tags": [
      "Ordered Set",
      "Array",
      "Binary Search",
      "Line Sweep",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "default": "Line Sweep",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 49.6
  },
  "word_frequency": {
    "qno": 192,
    "title": "Word Frequency",
    "tags": [
      "Shell"
    ],
    "default": "Shell",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 25.8
  },
  "valid_phone_numbers": {
    "qno": 193,
    "title": "Valid Phone Numbers",
    "tags": [
      "Shell"
    ],
    "default": "Shell",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 26.1
  },
  "transpose_file": {
    "qno": 194,
    "title": "Transpose File",
    "tags": [
      "Shell"
    ],
    "default": "Shell",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 26.4
  },
  "tenth_line": {
    "qno": 195,
    "title": "Tenth Line",
    "tags": [
      "Shell"
    ],
    "default": "Shell",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 33.8
  },
  "h-index": {
    "qno": 274,
    "title": "H-Index",
    "tags": [
      "Array",
      "Sorting",
      "Counting Sort"
    ],
    "default": "Counting Sort",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 39.0
  },
  "array_partition": {
    "qno": 561,
    "title": "Array Partition",
    "tags": [
      "Array",
      "Greedy",
      "Sorting",
      "Counting Sort"
    ],
    "default": "Counting Sort",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 78.9
  },
  "height_checker": {
    "qno": 1051,
    "title": "Height Checker",
    "tags": [
      "Array",
      "Sorting",
      "Counting Sort"
    ],
    "default": "Counting Sort",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 80.6
  },
  "relative_sort_array": {
    "qno": 1122,
    "title": "Relative Sort Array",
    "tags": [
      "Array",
      "Hash Table",
      "Sorting",
      "Counting Sort"
    ],
    "default": "Counting Sort",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 74.6
  },
  "connecting_cities_with_minimum_cost": {
    "qno": 1135,
    "title": "Connecting Cities With Minimum Cost",
    "tags": [
      "Union Find",
      "Graph",
      "Heap (Priority Queue)",
      "Minimum Spanning Tree"
    ],
    "default": "Minimum Spanning Tree",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 62.0
  },
  "optimize_water_distribution_in_a_village": {
    "qno": 1168,
    "title": "Optimize Water Distribution in a Village",
    "tags": [
      "Union Find",
      "Graph",
      "Heap (Priority Queue)",
      "Minimum Spanning Tree"
    ],
    "default": "Minimum Spanning Tree",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 64.8
  },
  "min_cost_to_connect_all_points": {
    "qno": 1584,
    "title": "Min Cost to Connect All Points",
    "tags": [
      "Array",
      "Union Find",
      "Graph",
      "Minimum Spanning Tree"
    ],
    "default": "Minimum Spanning Tree",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 67.0
  },
  "checking_existence_of_edge_length_limited_paths_ii": {
    "qno": 1724,
    "title": "Checking Existence of Edge Length Limited Paths II",
    "tags": [
      "Union Find",
      "Graph",
      "Minimum Spanning Tree"
    ],
    "default": "Minimum Spanning Tree",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 51.6
  },
  "longest_repeating_substring": {
    "qno": 1062,
    "title": "Longest Repeating Substring",
    "tags": [
      "String",
      "Binary Search",
      "Dynamic Programming",
      "Rolling Hash",
      "Suffix Array",
      "Hash Function"
    ],
    "default": "Suffix Array",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 60.8
  },
  "longest_duplicate_substring": {
    "qno": 1044,
    "title": "Longest Duplicate Substring",
    "tags": [
      "String",
      "Binary Search",
      "Sliding Window",
      "Rolling Hash",
      "Suffix Array",
      "Hash Function"
    ],
    "default": "Suffix Array",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 30.6
  },
  "number_of_distinct_substrings_in_a_string": {
    "qno": 1698,
    "title": "Number of Distinct Substrings in a String",
    "tags": [
      "String",
      "Trie",
      "Rolling Hash",
      "Suffix Array",
      "Hash Function"
    ],
    "default": "Suffix Array",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 64.0
  },
  "longest_common_subpath": {
    "qno": 1923,
    "title": "Longest Common Subpath",
    "tags": [
      "Array",
      "Binary Search",
      "Rolling Hash",
      "Suffix Array",
      "Hash Function"
    ],
    "default": "Suffix Array",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 28.2
  },
  "number_of_ways_to_separate_numbers": {
    "qno": 1977,
    "title": "number_of_ways_to_separate_numbers",
    "tags": [
      "String",
      "Dynamic Programming",
      "Suffix Array"
    ],
    "default": "Suffix Array",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 20.8
  },
  "sum_of_scores_of_built_strings": {
    "qno": 2223,
    "title": "Sum of Scores of Built Strings",
    "tags": [
      "String",
      "Binary Search",
      "Rolling Hash",
      "Suffix Array",
      "String Matching",
      "Hash Function"
    ],
    "default": "Suffix Array",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 39.9
  },
  "contains_duplicate_iii": {
    "qno": 220,
    "title": "Contains Duplicate III",
    "tags": [
      "Array",
      "Sliding Window",
      "Sorting",
      "Bucket Sort",
      "Ordered Set"
    ],
    "default": "Bucket Sort",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 22.8
  },
  "top_k_frequent_elements": {
    "qno": 347,
    "title": "Top K Frequent Elements",
    "tags": [
      "Array",
      "Hash Table",
      "Divide and Conquer",
      "Sorting",
      "Heap (Priority Queue)",
      "Bucket Sort",
      "Counting",
      "Quickselect"
    ],
    "default": "Bucket Sort",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 62.9
  },
  "sort_characters_by_frequency": {
    "qno": 451,
    "title": "Sort Characters By Frequency",
    "tags": [
      "Hash Table",
      "String",
      "Sorting",
      "Heap (Priority Queue)",
      "Bucket Sort",
      "Counting"
    ],
    "default": "Bucket Sort",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 72.6
  },
  "top_k_frequent_words": {
    "qno": 692,
    "title": "Top K Frequent Words",
    "tags": [
      "String",
      "Trie",
      "Sorting",
      "Heap (Priority Queue)",
      "Bucket Sort",
      "Counting"
    ],
    "default": "Bucket Sort",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 58.1
  },
  "kth_largest_element_in_an_array": {
    "qno": 215,
    "title": "Kth Largest Element in an Array",
    "tags": [
      "Array",
      "Divide and Conquer",
      "Sorting",
      "Heap (Priority Queue)",
      "Quickselect"
    ],
    "default": "Quickselect",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 66.8
  },
  "wiggle_sort_ii": {
    "qno": 324,
    "title": "Wiggle Sort II",
    "tags": [
      "Array",
      "Divide and Conquer",
      "Greedy",
      "Sorting",
      "Quickselect"
    ],
    "default": "Quickselect",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 34.4
  },
  "k_closest_points_to_origin": {
    "qno": 973,
    "title": "K Closest Points to Origin",
    "tags": [
      "Array",
      "Math",
      "Divide and Conquer",
      "Geometry",
      "Sorting",
      "Heap (Priority Queue)",
      "Quickselect"
    ],
    "default": "Quickselect",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 66.5
  },
  "find_kth_largest_xor_coordinate_value": {
    "qno": 1738,
    "title": "Find Kth Largest XOR Coordinate Value",
    "tags": [
      "Array",
      "Divide and Conquer",
      "Bit Manipulation",
      "Sorting",
      "Heap (Priority Queue)",
      "Matrix",
      "Prefix Sum",
      "Quickselect"
    ],
    "default": "Quickselect",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 61.8
  },
  "find_the_kth_largest_integer_in_the_array": {
    "qno": 1985,
    "title": "Find the Kth Largest Integer in the Array",
    "tags": [
      "Array",
      "String",
      "Divide and Conquer",
      "Sorting",
      "Heap (Priority Queue)",
      "Quickselect"
    ],
    "default": "Quickselect",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 43.9
  },
  "soup_servings": {
    "qno": 808,
    "title": "Soup Servings",
    "tags": [
      "Math",
      "Dynamic Programming",
      "Probability And Statistics"
    ],
    "default": "Probability And Statistics",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 54.0
  },
  "new_21_game": {
    "qno": 837,
    "title": "New 21 Game",
    "tags": [
      "Math",
      "Dynamic Programming",
      "Sliding Window",
      "Probability And Statistics"
    ],
    "default": "Probability And Statistics",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 45.0
  },
  "toss_strange_coins": {
    "qno": 1230,
    "title": "Toss Strange Coins",
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Probability And Statistics"
    ],
    "default": "Probability And Statistics",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 56.3
  },
  "statistics_from_a_large_sample": {
    "qno": 1093,
    "title": "Statistics from a Large Sample",
    "tags": [
      "Array",
      "Math",
      "Probability And Statistics"
    ],
    "default": "Probability And Statistics",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 42.0
  },
  "airplane_seat_assignment_probability": {
    "qno": 1227,
    "title": "Airplane Seat Assignment Probability",
    "tags": [
      "Math",
      "Dynamic Programming",
      "Brainteaser",
      "Probability And Statistics"
    ],
    "default": "Probability And Statistics",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 66.4
  },
  "probability_of_a_two_boxes_having_the_same_number_of_distinct_balls": {
    "qno": 1467,
    "title": "Probability of a Two Boxes Having The Same Number of Distinct Balls",
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Backtracking",
      "Combinatorics",
      "Probability And Statistics"
    ],
    "default": "Probability And Statistics",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 60.4
  },
  "lru_cache": {
    "qno": "146",
    "title": "LRU Cache",
    "tags": [
      "Hash Table",
      "Linked List",
      "Design",
      "Doubly-Linked List"
    ],
    "default": "Doubly-Linked List",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 42.7
  },
  "all_o`one_data_structure": {
    "qno": "432",
    "title": "All O`one Data Structure",
    "tags": [
      "Hash Table",
      "Linked List",
      "Design",
      "Doubly-Linked List"
    ],
    "default": "Doubly-Linked List",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 36.8
  },
  "lfu_cache": {
    "qno": "460",
    "title": "LFU Cache",
    "tags": [
      "Hash Table",
      "Linked List",
      "Design",
      "Doubly-Linked List"
    ],
    "default": "Doubly-Linked List",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 44.3
  },
  "max_stack": {
    "qno": "716",
    "title": "Max Stack",
    "tags": [
      "Linked List",
      "Stack",
      "Design",
      "Doubly-Linked List",
      "Ordered Set"
    ],
    "default": "Doubly-Linked List",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 45.1
  },
  "convert_binary_search_tree_to_sorted_doubly_linked_list": {
    "qno": "426",
    "title": "Convert Binary Search Tree to Sorted Doubly Linked List",
    "tags": [
      "Linked List",
      "Stack",
      "Tree",
      "Depth-First Search",
      "Binary Search Tree",
      "Binary Tree",
      "Doubly-Linked List"
    ],
    "default": "Doubly-Linked List",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 64.8
  },
  "flatten_a_multilevel_doubly_linked_list": {
    "qno": "430",
    "title": "Flatten a Multilevel Doubly Linked List",
    "tags": [
      "Linked List",
      "Depth-First Search",
      "Doubly-Linked List"
    ],
    "default": "Doubly-Linked List",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 60.1
  },
  "design_browser_history": {
    "qno": "1472",
    "title": "Design Browser History",
    "tags": [
      "Array",
      "Linked List",
      "Stack",
      "Design",
      "Doubly-Linked List",
      "Data Stream"
    ],
    "default": "Doubly-Linked List",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 77.6
  },
  "design_a_text_editor": {
    "qno": "2296",
    "title": "Design a Text Editor",
    "tags": [
      "Linked List",
      "String",
      "Stack",
      "Design",
      "Simulation",
      "Doubly-Linked List"
    ],
    "default": "Doubly-Linked List",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 44.6
  },
  "building_h2o": {
    "qno": "1117",
    "title": "Building H2O",
    "tags": [
      "Concurrency"
    ],
    "default": "Concurrency",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 56.2
  },
  "print_foobar_alternately": {
    "qno": "1115",
    "title": "Print FooBar Alternately",
    "tags": [
      "Concurrency"
    ],
    "default": "Concurrency",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 66
  },
  "print_in_order": {
    "qno": "1114",
    "title": "Print in Order",
    "tags": [
      "Concurrency"
    ],
    "default": "Concurrency",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 69.4
  },
  "design_bounded_blocking_queue": {
    "qno": "1188",
    "title": "Design Bounded Blocking Queue",
    "tags": [
      "Concurrency"
    ],
    "default": "Concurrency",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 72.4
  },
  "print_zero_even_odd": {
    "qno": "1116",
    "title": "Print Zero Even Odd",
    "tags": [
      "Concurrency"
    ],
    "default": "Concurrency",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 61
  },
  "fizz_buzz_multithreaded": {
    "qno": "1195",
    "title": "Fizz Buzz Multithreaded",
    "tags": [
      "Concurrency"
    ],
    "default": "Concurrency",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 72.4
  },
  "the_dining_philosophers": {
    "qno": "1226",
    "title": "The Dining Philosophers",
    "tags": [
      "Concurrency"
    ],
    "default": "Concurrency",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 53.6
  },
  "web_crawler_multithreaded": {
    "qno": "1242",
    "title": "Web Crawler Multithreaded",
    "tags": [
      "Depth-First Search",
      "Breadth-First Search",
      "Concurrency"
    ],
    "default": "Concurrency",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 49.1
  },
  "traffic_light_controlled_intersection": {
    "qno": "1279",
    "title": "Traffic Light Controlled Intersection",
    "tags": [
      "Concurrency"
    ],
    "default": "Concurrency",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 73
  },
  "binary_search_tree_iterator": {
    "qno": "173",
    "title": "Binary Search Tree Iterator",
    "tags": [
      "Stack",
      "Tree",
      "Design",
      "Binary Search Tree",
      "Binary Tree",
      "Iterator"
    ],
    "default": "Iterator",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 72.3
  },
  "flatten_2d_vector": {
    "qno": "251",
    "title": "Flatten 2D Vector",
    "tags": [
      "Array",
      "Two Pointers",
      "Design",
      "Iterator"
    ],
    "default": "Iterator",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 49.6
  },
  "zigzag_iterator": {
    "qno": "281",
    "title": "Zigzag Iterator",
    "tags": [
      "Array",
      "Design",
      "Queue",
      "Iterator"
    ],
    "default": "Iterator",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 64
  },
  "peeking_iterator": {
    "qno": "284",
    "title": "Peeking Iterator",
    "tags": [
      "Array",
      "Design",
      "Iterator"
    ],
    "default": "Iterator",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 59.6
  },
  "flatten_nested_list_iterator": {
    "qno": "341",
    "title": "Flatten Nested List Iterator",
    "tags": [
      "Stack",
      "Tree",
      "Depth-First Search",
      "Design",
      "Queue",
      "Iterator"
    ],
    "default": "Iterator",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 64.5
  },
  "design_compressed_string_iterator": {
    "qno": "604",
    "title": "Design Compressed String Iterator",
    "tags": [
      "Array",
      "String",
      "Design",
      "Iterator"
    ],
    "default": "Iterator",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 39.8
  },
  "rle_iterator": {
    "qno": "900",
    "title": "RLE Iterator",
    "tags": [
      "Array",
      "Design",
      "Counting",
      "Iterator"
    ],
    "default": "Iterator",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 59.5
  },
  "iterator_for_combination": {
    "qno": "1286",
    "title": "Iterator for Combination",
    "tags": [
      "String",
      "Backtracking",
      "Design",
      "Iterator"
    ],
    "default": "Iterator",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 73.3
  },
  "binary_search_tree_iterator_ii": {
    "qno": "1586",
    "title": "Binary Search Tree Iterator II",
    "tags": [
      "Stack",
      "Tree",
      "Design",
      "Binary Search Tree",
      "Binary Tree",
      "Iterator"
    ],
    "default": "Iterator",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 65.4
  }
}