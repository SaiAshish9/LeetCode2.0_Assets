{
  "critical_connections_in_a_network": {
    "qno": 1192,
    "title": "Critical Connections in a Network",
    "tags": [
      "Depth-First Search",
      "Graph",
      "Biconnected Component"
    ],
    "default": "Biconnected Component",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 55.7
  },
  "implement_rand10()_using_rand7()": {
    "qno": 470,
    "title": "Implement Rand10() Using Rand7()",
    "tags": [
      "Math",
      "Rejection Sampling",
      "Randomized",
      "Probability And Statistics"
    ],
    "default": "Rejection Sampling",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 45.9
  },
  "generate_random_point_in_a_circle": {
    "qno": 478,
    "title": "Generate Random Point in a Circle",
    "tags": [
      "Math",
      "Geometry",
      "Rejection Sampling",
      "Randomized"
    ],
    "default": "Rejection Sampling",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 39.8
  },
  "maximum_gap": {
    "qno": 164,
    "title": "Maximum Gap",
    "tags": [
      "Array",
      "Sorting",
      "Bucket Sort",
      "Radix Sort"
    ],
    "default": "Radix Sort",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 46.3
  },
  "sort_an_array": {
    "qno": 912,
    "title": "Sort an Array",
    "tags": [
      "Array",
      "Divide and Conquer",
      "Sorting",
      "Heap (Priority Queue)",
      "Merge Sort",
      "Bucket Sort",
      "Radix Sort",
      "Counting Sort"
    ],
    "default": "Radix Sort",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 56.3
  },
  "query_kth_smallest_trimmed_number": {
    "qno": 2343,
    "title": "Query Kth Smallest Trimmed Number",
    "tags": [
      "Array",
      "String",
      "Divide and Conquer",
      "Sorting",
      "Heap (Priority Queue)",
      "Radix Sort",
      "Quickselect"
    ],
    "default": "Radix Sort",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 46.1
  },
  "reconstruct_itinerary": {
    "qno": 332,
    "title": "Reconstruct Itinerary",
    "tags": [
      "Depth-First Search",
      "Graph",
      "Eulerian Circuit"
    ],
    "default": "Eulerian Circuit",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 43.2
  },
  "cracking_the_safe": {
    "qno": 753,
    "title": "Cracking the Safe",
    "tags": [
      "Depth-First Search",
      "Graph",
      "Eulerian Circuit"
    ],
    "default": "Eulerian Circuit",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 56.9
  },
  "valid_arrangement_of_pairs": {
    "qno": 2097,
    "title": "Valid Arrangement of Pairs",
    "tags": [
      "Depth-First Search",
      "Graph",
      "Eulerian Circuit"
    ],
    "default": "Eulerian Circuit",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 43.2
  },
  "find_critical_and_pseudo-critical_edges_in_minimum_spanning_tree": {
    "qno": 1489,
    "title": "Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree",
    "tags": [
      "Union Find",
      "Graph",
      "Sorting",
      "Minimum Spanning Tree",
      "Strongly Connected Component"
    ],
    "default": "Strongly Connected Component",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 67.7
  },
  "minimum_number_of_days_to_disconnect_island": {
    "qno": 1568,
    "title": "Minimum Number of Days to Disconnect Island",
    "tags": [
      "Array",
      "Depth-First Search",
      "Breadth-First Search",
      "Matrix",
      "Strongly Connected Component"
    ],
    "default": "Strongly Connected Component",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 45.0
  },
  "minimum_edge_weight_equilibrium_queries_in_a_tree": {
    "qno": 2846,
    "title": "Minimum Edge Weight Equilibrium Queries in a Tree",
    "tags": [
      "Array",
      "Tree",
      "Graph",
      "Strongly Connected Component"
    ],
    "default": "Strongly Connected Component",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 43.8
  },
  "linked_list_random_node": {
    "qno": 382,
    "title": "Linked List Random Node",
    "tags": [
      "Linked List",
      "Math",
      "Reservoir Sampling",
      "Randomized"
    ],
    "default": "Reservoir Sampling",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 63.2
  },
  "random_pick_index": {
    "qno": 398,
    "title": "Random Pick Index",
    "tags": [
      "Hash Table",
      "Math",
      "Reservoir Sampling",
      "Randomized"
    ],
    "default": "Reservoir Sampling",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 63.4
  },
  "random_flip_matrix": {
    "qno": 519,
    "title": "Random Flip Matrix",
    "tags": [
      "Hash Table",
      "Math",
      "Reservoir Sampling",
      "Randomized"
    ],
    "default": "Reservoir Sampling",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 41.9
  },
  "random_point_in_non-overlapping_rectangles": {
    "qno": 497,
    "title": "Random Point in Non-overlapping Rectangles",
    "tags": [
      "Array",
      "Math",
      "Binary Search",
      "Reservoir Sampling",
      "Prefix Sum",
      "Ordered Set",
      "Randomized"
    ],
    "default": "Reservoir Sampling",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 40.0
  },
  "the_skyline_problem": {
    "qno": 218,
    "title": "The Skyline Problem",
    "tags": [
      "Array",
      "Divide and Conquer",
      "Binary Indexed Tree",
      "Segment Tree",
      "Line Sweep",
      "Heap (Priority Queue)",
      "Ordered Set"
    ],
    "default": "Line Sweep",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 42.7
  },
  "perfect_rectangle": {
    "qno": 391,
    "title": "Perfect Rectangle",
    "tags": [
      "Array",
      "Line Sweep"
    ],
    "default": "Line Sweep",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 33.8
  },
  "rectangle_area_ii": {
    "qno": 850,
    "title": "Rectangle Area II",
    "tags": [
      "Array",
      "Segment Tree",
      "Line Sweep"
    ],
    "default": "Line Sweep",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 54.2
  },
  "minimum_interval_to_include_each_query": {
    "qno": 1851,
    "title": "Minimum Interval to Include Each Query",
    "tags": [
      "Ordered Set",
      "Array",
      "Binary Search",
      "Line Sweep",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "default": "Line Sweep",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 49.6
  },
  "word_frequency": {
    "qno": 192,
    "title": "Word Frequency",
    "tags": [
      "Shell"
    ],
    "default": "Shell",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 25.8
  },
  "valid_phone_numbers": {
    "qno": 193,
    "title": "Valid Phone Numbers",
    "tags": [
      "Shell"
    ],
    "default": "Shell",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 26.1
  },
  "transpose_file": {
    "qno": 194,
    "title": "Transpose File",
    "tags": [
      "Shell"
    ],
    "default": "Shell",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 26.4
  },
  "tenth_line": {
    "qno": 195,
    "title": "Tenth Line",
    "tags": [
      "Shell"
    ],
    "default": "Shell",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 33.8
  },
  "h-index": {
    "qno": 274,
    "title": "H-Index",
    "tags": [
      "Array",
      "Sorting",
      "Counting Sort"
    ],
    "default": "Counting Sort",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 39.0
  },
  "array_partition": {
    "qno": 561,
    "title": "Array Partition",
    "tags": [
      "Array",
      "Greedy",
      "Sorting",
      "Counting Sort"
    ],
    "default": "Counting Sort",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 78.9
  },
  "height_checker": {
    "qno": 1051,
    "title": "Height Checker",
    "tags": [
      "Array",
      "Sorting",
      "Counting Sort"
    ],
    "default": "Counting Sort",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 80.6
  },
  "relative_sort_array": {
    "qno": 1122,
    "title": "Relative Sort Array",
    "tags": [
      "Array",
      "Hash Table",
      "Sorting",
      "Counting Sort"
    ],
    "default": "Counting Sort",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 74.6
  },
  "connecting_cities_with_minimum_cost": {
    "qno": 1135,
    "title": "Connecting Cities With Minimum Cost",
    "tags": [
      "Union Find",
      "Graph",
      "Heap (Priority Queue)",
      "Minimum Spanning Tree"
    ],
    "default": "Minimum Spanning Tree",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 62.0
  },
  "optimize_water_distribution_in_a_village": {
    "qno": 1168,
    "title": "Optimize Water Distribution in a Village",
    "tags": [
      "Union Find",
      "Graph",
      "Heap (Priority Queue)",
      "Minimum Spanning Tree"
    ],
    "default": "Minimum Spanning Tree",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 64.8
  },
  "min_cost_to_connect_all_points": {
    "qno": 1584,
    "title": "Min Cost to Connect All Points",
    "tags": [
      "Array",
      "Union Find",
      "Graph",
      "Minimum Spanning Tree"
    ],
    "default": "Minimum Spanning Tree",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 67.0
  },
  "checking_existence_of_edge_length_limited_paths_ii": {
    "qno": 1724,
    "title": "Checking Existence of Edge Length Limited Paths II",
    "tags": [
      "Union Find",
      "Graph",
      "Minimum Spanning Tree"
    ],
    "default": "Minimum Spanning Tree",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 51.6
  },
  "longest_repeating_substring": {
    "qno": 1062,
    "title": "Longest Repeating Substring",
    "tags": [
      "String",
      "Binary Search",
      "Dynamic Programming",
      "Rolling Hash",
      "Suffix Array",
      "Hash Function"
    ],
    "default": "Suffix Array",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 60.8
  },
  "longest_duplicate_substring": {
    "qno": 1044,
    "title": "Longest Duplicate Substring",
    "tags": [
      "String",
      "Binary Search",
      "Sliding Window",
      "Rolling Hash",
      "Suffix Array",
      "Hash Function"
    ],
    "default": "Suffix Array",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 30.6
  },
  "number_of_distinct_substrings_in_a_string": {
    "qno": 1698,
    "title": "Number of Distinct Substrings in a String",
    "tags": [
      "String",
      "Trie",
      "Rolling Hash",
      "Suffix Array",
      "Hash Function"
    ],
    "default": "Suffix Array",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 64.0
  },
  "longest_common_subpath": {
    "qno": 1923,
    "title": "Longest Common Subpath",
    "tags": [
      "Array",
      "Binary Search",
      "Rolling Hash",
      "Suffix Array",
      "Hash Function"
    ],
    "default": "Suffix Array",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 28.2
  },
  "number_of_ways_to_separate_numbers": {
    "qno": 1977,
    "title": "Number of Ways to Separate Numbers",
    "tags": [
      "String",
      "Dynamic Programming",
      "Suffix Array"
    ],
    "default": "Suffix Array",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 20.8
  },
  "sum_of_scores_of_built_strings": {
    "qno": 2223,
    "title": "Sum of Scores of Built Strings",
    "tags": [
      "String",
      "Binary Search",
      "Rolling Hash",
      "Suffix Array",
      "String Matching",
      "Hash Function"
    ],
    "default": "Suffix Array",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 39.9
  },
  "contains_duplicate_iii": {
    "qno": 220,
    "title": "Contains Duplicate III",
    "tags": [
      "Array",
      "Sliding Window",
      "Sorting",
      "Bucket Sort",
      "Ordered Set"
    ],
    "default": "Sliding Window",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 22.8
  },
  "top_k_frequent_elements": {
    "qno": 347,
    "title": "Top K Frequent Elements",
    "tags": [
      "Array",
      "Hash Table",
      "Divide and Conquer",
      "Sorting",
      "Heap (Priority Queue)",
      "Bucket Sort",
      "Counting",
      "Quickselect"
    ],
    "default": "Bucket Sort",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 62.9
  },
  "sort_characters_by_frequency": {
    "qno": 451,
    "title": "Sort Characters By Frequency",
    "tags": [
      "Hash Table",
      "String",
      "Sorting",
      "Heap (Priority Queue)",
      "Bucket Sort",
      "Counting"
    ],
    "default": "Bucket Sort",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 72.6
  },
  "top_k_frequent_words": {
    "qno": 692,
    "title": "Top K Frequent Words",
    "tags": [
      "String",
      "Trie",
      "Sorting",
      "Heap (Priority Queue)",
      "Bucket Sort",
      "Counting"
    ],
    "default": "Bucket Sort",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 58.1
  },
  "kth_largest_element_in_an_array": {
    "qno": 215,
    "title": "Kth Largest Element in an Array",
    "tags": [
      "Array",
      "Divide and Conquer",
      "Sorting",
      "Heap (Priority Queue)",
      "Quickselect"
    ],
    "default": "Quickselect",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 66.8
  },
  "wiggle_sort_ii": {
    "qno": 324,
    "title": "Wiggle Sort II",
    "tags": [
      "Array",
      "Divide and Conquer",
      "Greedy",
      "Sorting",
      "Quickselect"
    ],
    "default": "Quickselect",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 34.4
  },
  "k_closest_points_to_origin": {
    "qno": 973,
    "title": "K Closest Points to Origin",
    "tags": [
      "Array",
      "Math",
      "Divide and Conquer",
      "Geometry",
      "Sorting",
      "Heap (Priority Queue)",
      "Quickselect"
    ],
    "default": "Quickselect",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 66.5
  },
  "find_kth_largest_xor_coordinate_value": {
    "qno": 1738,
    "title": "Find Kth Largest XOR Coordinate Value",
    "tags": [
      "Array",
      "Divide and Conquer",
      "Bit Manipulation",
      "Sorting",
      "Heap (Priority Queue)",
      "Matrix",
      "Prefix Sum",
      "Quickselect"
    ],
    "default": "Quickselect",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 61.8
  },
  "find_the_kth_largest_integer_in_the_array": {
    "qno": 1985,
    "title": "Find the Kth Largest Integer in the Array",
    "tags": [
      "Array",
      "String",
      "Divide and Conquer",
      "Sorting",
      "Heap (Priority Queue)",
      "Quickselect"
    ],
    "default": "Quickselect",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 43.9
  },
  "soup_servings": {
    "qno": 808,
    "title": "Soup Servings",
    "tags": [
      "Math",
      "Dynamic Programming",
      "Probability And Statistics"
    ],
    "default": "Probability And Statistics",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 54.0
  },
  "new_21_game": {
    "qno": 837,
    "title": "New 21 Game",
    "tags": [
      "Math",
      "Dynamic Programming",
      "Sliding Window",
      "Probability And Statistics"
    ],
    "default": "Probability And Statistics",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 45.0
  },
  "toss_strange_coins": {
    "qno": 1230,
    "title": "Toss Strange Coins",
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Probability And Statistics"
    ],
    "default": "Probability And Statistics",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 56.3
  },
  "statistics_from_a_large_sample": {
    "qno": 1093,
    "title": "Statistics from a Large Sample",
    "tags": [
      "Array",
      "Math",
      "Probability And Statistics"
    ],
    "default": "Probability And Statistics",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 42.0
  },
  "airplane_seat_assignment_probability": {
    "qno": 1227,
    "title": "Airplane Seat Assignment Probability",
    "tags": [
      "Math",
      "Dynamic Programming",
      "Brainteaser",
      "Probability And Statistics"
    ],
    "default": "Probability And Statistics",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 66.4
  },
  "probability_of_a_two_boxes_having_the_same_number_of_distinct_balls": {
    "qno": 1467,
    "title": "Probability of a Two Boxes Having The Same Number of Distinct Balls",
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Backtracking",
      "Combinatorics",
      "Probability And Statistics"
    ],
    "default": "Probability And Statistics",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 60.4
  },
  "lru_cache": {
    "qno": "146",
    "title": "LRU Cache",
    "tags": [
      "Hash Table",
      "Linked List",
      "Design",
      "Doubly-Linked List"
    ],
    "default": "Doubly-Linked List",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 42.7
  },
  "all_o`one_data_structure": {
    "qno": "432",
    "title": "All O`one Data Structure",
    "tags": [
      "Hash Table",
      "Linked List",
      "Design",
      "Doubly-Linked List"
    ],
    "default": "Doubly-Linked List",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 36.8
  },
  "lfu_cache": {
    "qno": "460",
    "title": "LFU Cache",
    "tags": [
      "Hash Table",
      "Linked List",
      "Design",
      "Doubly-Linked List"
    ],
    "default": "Doubly-Linked List",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 44.3
  },
  "max_stack": {
    "qno": "716",
    "title": "Max Stack",
    "tags": [
      "Linked List",
      "Stack",
      "Design",
      "Doubly-Linked List",
      "Ordered Set"
    ],
    "default": "Doubly-Linked List",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 45.1
  },
  "convert_binary_search_tree_to_sorted_doubly_linked_list": {
    "qno": "426",
    "title": "Convert Binary Search Tree to Sorted Doubly Linked List",
    "tags": [
      "Linked List",
      "Stack",
      "Tree",
      "Depth-First Search",
      "Binary Search Tree",
      "Binary Tree",
      "Doubly-Linked List"
    ],
    "default": "Doubly-Linked List",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 64.8
  },
  "flatten_a_multilevel_doubly_linked_list": {
    "qno": "430",
    "title": "Flatten a Multilevel Doubly Linked List",
    "tags": [
      "Linked List",
      "Depth-First Search",
      "Doubly-Linked List"
    ],
    "default": "Doubly-Linked List",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 60.1
  },
  "design_browser_history": {
    "qno": "1472",
    "title": "Design Browser History",
    "tags": [
      "Array",
      "Linked List",
      "Stack",
      "Design",
      "Doubly-Linked List",
      "Data Stream"
    ],
    "default": "Doubly-Linked List",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 77.6
  },
  "design_a_text_editor": {
    "qno": "2296",
    "title": "Design a Text Editor",
    "tags": [
      "Linked List",
      "String",
      "Stack",
      "Design",
      "Simulation",
      "Doubly-Linked List"
    ],
    "default": "Doubly-Linked List",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 44.6
  },
  "building_h2o": {
    "qno": "1117",
    "title": "Building H2O",
    "tags": [
      "Concurrency"
    ],
    "default": "Concurrency",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 56.2
  },
  "print_foobar_alternately": {
    "qno": "1115",
    "title": "Print FooBar Alternately",
    "tags": [
      "Concurrency"
    ],
    "default": "Concurrency",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 66
  },
  "print_in_order": {
    "qno": "1114",
    "title": "Print in Order",
    "tags": [
      "Concurrency"
    ],
    "default": "Concurrency",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 69.4
  },
  "design_bounded_blocking_queue": {
    "qno": "1188",
    "title": "Design Bounded Blocking Queue",
    "tags": [
      "Concurrency"
    ],
    "default": "Concurrency",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 72.4
  },
  "print_zero_even_odd": {
    "qno": "1116",
    "title": "Print Zero Even Odd",
    "tags": [
      "Concurrency"
    ],
    "default": "Concurrency",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 61
  },
  "fizz_buzz_multithreaded": {
    "qno": "1195",
    "title": "Fizz Buzz Multithreaded",
    "tags": [
      "Concurrency"
    ],
    "default": "Concurrency",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 72.4
  },
  "the_dining_philosophers": {
    "qno": "1226",
    "title": "The Dining Philosophers",
    "tags": [
      "Concurrency"
    ],
    "default": "Concurrency",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 53.6
  },
  "web_crawler_multithreaded": {
    "qno": "1242",
    "title": "Web Crawler Multithreaded",
    "tags": [
      "Depth-First Search",
      "Breadth-First Search",
      "Concurrency"
    ],
    "default": "Concurrency",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 49.1
  },
  "traffic_light_controlled_intersection": {
    "qno": "1279",
    "title": "Traffic Light Controlled Intersection",
    "tags": [
      "Concurrency"
    ],
    "default": "Concurrency",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 73
  },
  "binary_search_tree_iterator": {
    "qno": "173",
    "title": "Binary Search Tree Iterator",
    "tags": [
      "Stack",
      "Tree",
      "Design",
      "Binary Search Tree",
      "Binary Tree",
      "Iterator"
    ],
    "default": "Iterator",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 72.3
  },
  "flatten_2d_vector": {
    "qno": "251",
    "title": "Flatten 2D Vector",
    "tags": [
      "Array",
      "Two Pointers",
      "Design",
      "Iterator"
    ],
    "default": "Iterator",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 49.6
  },
  "zigzag_iterator": {
    "qno": "281",
    "title": "Zigzag Iterator",
    "tags": [
      "Array",
      "Design",
      "Queue",
      "Iterator"
    ],
    "default": "Iterator",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 64
  },
  "peeking_iterator": {
    "qno": "284",
    "title": "Peeking Iterator",
    "tags": [
      "Array",
      "Design",
      "Iterator"
    ],
    "default": "Iterator",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 59.6
  },
  "flatten_nested_list_iterator": {
    "qno": "341",
    "title": "Flatten Nested List Iterator",
    "tags": [
      "Stack",
      "Tree",
      "Depth-First Search",
      "Design",
      "Queue",
      "Iterator"
    ],
    "default": "Iterator",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 64.5
  },
  "design_compressed_string_iterator": {
    "qno": "604",
    "title": "Design Compressed String Iterator",
    "tags": [
      "Array",
      "String",
      "Design",
      "Iterator"
    ],
    "default": "Iterator",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 39.8
  },
  "rle_iterator": {
    "qno": "900",
    "title": "RLE Iterator",
    "tags": [
      "Array",
      "Design",
      "Counting",
      "Iterator"
    ],
    "default": "Iterator",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 59.5
  },
  "iterator_for_combination": {
    "qno": "1286",
    "title": "Iterator for Combination",
    "tags": [
      "String",
      "Backtracking",
      "Design",
      "Iterator"
    ],
    "default": "Iterator",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 73.3
  },
  "binary_search_tree_iterator_ii": {
    "qno": "1586",
    "title": "Binary Search Tree Iterator II",
    "tags": [
      "Stack",
      "Tree",
      "Design",
      "Binary Search Tree",
      "Binary Tree",
      "Iterator"
    ],
    "default": "Iterator",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 65.4
  },
  "merge_k_sorted_lists": {
    "qno": "23",
    "title": "Merge k Sorted Lists",
    "tags": [
      "Linked List",
      "Divide and Conquer",
      "Heap (Priority Queue)",
      "Merge Sort"
    ],
    "default": "Merge Sort",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 53.1
  },
  "sort_list": {
    "qno": "148",
    "title": "Sort List",
    "tags": [
      "Linked List",
      "Two Pointers",
      "Divide and Conquer",
      "Sorting",
      "Merge Sort"
    ],
    "default": "Merge Sort",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 58.3
  },
  "count_of_smaller_numbers_after_self": {
    "qno": "315",
    "title": "Count of Smaller Numbers After Self",
    "tags": [
      "Array",
      "Binary Search",
      "Divide and Conquer",
      "Binary Indexed Tree",
      "Segment Tree",
      "Merge Sort",
      "Ordered Set"
    ],
    "default": "Merge Sort",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 42.5
  },
  "count_of_range_sum": {
    "qno": "327",
    "title": "Count of Range Sum",
    "tags": [
      "Array",
      "Binary Search",
      "Divide and Conquer",
      "Binary Indexed Tree",
      "Segment Tree",
      "Merge Sort",
      "Ordered Set"
    ],
    "default": "Merge Sort",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 36
  },
  "reverse_pairs": {
    "qno": "493",
    "title": "Reverse Pairs",
    "tags": [
      "Array",
      "Binary Search",
      "Divide and Conquer",
      "Binary Indexed Tree",
      "Segment Tree",
      "Merge Sort",
      "Ordered Set"
    ],
    "default": "Merge Sort",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 30.7
  },
  "count_subarrays_with_more_ones_than_zeros": {
    "qno": "2031",
    "title": "Count Subarrays With More Ones Than Zeros",
    "tags": [
      "Array",
      "Binary Search",
      "Divide and Conquer",
      "Binary Indexed Tree",
      "Segment Tree",
      "Merge Sort",
      "Ordered Set"
    ],
    "default": "Merge Sort",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 52
  },
  "create_sorted_array_through_instructions": {
    "qno": "1649",
    "title": "Create Sorted Array through Instructions",
    "tags": [
      "Array",
      "Binary Search",
      "Divide and Conquer",
      "Binary Indexed Tree",
      "Segment Tree",
      "Merge Sort",
      "Ordered Set"
    ],
    "default": "Merge Sort",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 38.7
  },
  "count_good_triplets_in_an_array": {
    "qno": "2179",
    "title": "Count Good Triplets in an Array",
    "tags": [
      "Array",
      "Binary Search",
      "Divide and Conquer",
      "Binary Indexed Tree",
      "Segment Tree",
      "Merge Sort",
      "Ordered Set"
    ],
    "default": "Merge Sort",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 41
  },
  "number_of_pairs_satisfying_inequality": {
    "qno": "2426",
    "title": "Number of Pairs Satisfying Inequality",
    "tags": [
      "Array",
      "Binary Search",
      "Divide and Conquer",
      "Binary Indexed Tree",
      "Segment Tree",
      "Merge Sort",
      "Ordered Set"
    ],
    "default": "Merge Sort",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 44
  },
  "count_the_number_of_k-big_indices": {
    "qno": "2519",
    "title": "Count the Number of K-Big Indices",
    "tags": [
      "Array",
      "Binary Search",
      "Divide and Conquer",
      "Binary Indexed Tree",
      "Segment Tree",
      "Merge Sort",
      "Ordered Set"
    ],
    "default": "Merge Sort",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 53.4
  },
  "find_the_index_of_permutation": {
    "qno": "3109",
    "title": "Find the Index of Permutation",
    "tags": [
      "Array",
      "Binary Search",
      "Divide and Conquer",
      "Binary Indexed Tree",
      "Segment Tree",
      "Merge Sort",
      "Ordered Set"
    ],
    "default": "Merge Sort",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 42.1
  },
  "insert_delete_getrandom_o(1)": {
    "qno": "380",
    "title": "Insert Delete GetRandom O(1)",
    "tags": [
      "Array",
      "Hash Table",
      "Math",
      "Design",
      "Randomized"
    ],
    "default": "Randomized",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 54.5
  },
  "insert_delete_getrandom_o(1)_-_duplicates_allowed": {
    "qno": "381",
    "title": "Insert Delete GetRandom O(1) - Duplicates allowed",
    "tags": [
      "Array",
      "Hash Table",
      "Math",
      "Design",
      "Randomized"
    ],
    "default": "Randomized",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 35.5
  },
  "shuffle_an_array": {
    "qno": "384",
    "title": "Shuffle an Array",
    "tags": [
      "Array",
      "Math",
      "Randomized"
    ],
    "default": "Randomized",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 58.4
  },
  "random_pick_with_blacklist": {
    "qno": "710",
    "title": "Random Pick with Blacklist",
    "tags": [
      "Array",
      "Hash Table",
      "Math",
      "Binary Search",
      "Sorting",
      "Randomized"
    ],
    "default": "Randomized",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 33.4
  },
  "random_pick_with_weight": {
    "qno": "528",
    "title": "Random Pick with Weight",
    "tags": [
      "Array",
      "Math",
      "Binary Search",
      "Prefix Sum",
      "Randomized"
    ],
    "default": "Randomized",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 46.9
  },
  "best_position_for_a_service_centre": {
    "qno": "1515",
    "title": "Best Position for a Service Centre",
    "tags": [
      "Math",
      "Geometry",
      "Randomized"
    ],
    "default": "Randomized",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 35.5
  },
  "sliding_window_maximum": {
    "qno": "239",
    "title": "Sliding Window Maximum",
    "tags": [
      "Array",
      "Queue",
      "Sliding Window",
      "Heap (Priority Queue)",
      "Monotonic Queue"
    ],
    "default": "Monotonic Queue",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 46.6
  },
  "shortest_subarray_with_sum_at_least_k": {
    "qno": "862",
    "title": "Shortest Subarray with Sum at Least K",
    "tags": [
      "Array",
      "Binary Search",
      "Queue",
      "Sliding Window",
      "Heap (Priority Queue)",
      "Prefix Sum",
      "Monotonic Queue"
    ],
    "default": "Monotonic Queue",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 26
  },
  "maximum_sum_circular_subarray": {
    "qno": "918",
    "title": "Maximum Sum Circular Subarray",
    "tags": [
      "Array",
      "Divide and Conquer",
      "Dynamic Programming",
      "Queue",
      "Monotonic Queue"
    ],
    "default": "Monotonic Queue",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 45
  },
  "constrained_subsequence_sum": {
    "qno": "1425",
    "title": "Constrained Subsequence Sum",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Queue",
      "Sliding Window",
      "Heap (Priority Queue)",
      "Monotonic Queue"
    ],
    "default": "Monotonic Queue",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 56.7
  },
  "longest_continuous_subarray_with_absolute_diff_less_than_or_equal_to_limit": {
    "qno": "1438",
    "title": "Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit",
    "tags": [
      "Array",
      "Queue",
      "Sliding Window",
      "Heap (Priority Queue)",
      "Ordered Set",
      "Monotonic Queue"
    ],
    "default": "Monotonic Queue",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 49.6
  },
  "max_value_of_equation": {
    "qno": "1499",
    "title": "Max Value of Equation",
    "tags": [
      "Array",
      "Queue",
      "Sliding Window",
      "Heap (Priority Queue)",
      "Monotonic Queue"
    ],
    "default": "Monotonic Queue",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 44.1
  },
  "delivering_boxes_from_storage_to_ports": {
    "qno": "1687",
    "title": "Delivering Boxes from Storage to Ports",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Segment Tree",
      "Queue",
      "Heap (Priority Queue)",
      "Prefix Sum",
      "Monotonic Queue"
    ],
    "default": "Monotonic Queue",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 38.9
  },
  "jump_game_vi": {
    "qno": "1696",
    "title": "Jump Game VI",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Queue",
      "Heap (Priority Queue)",
      "Monotonic Queue"
    ],
    "default": "Monotonic Queue",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 45.7
  },
  "maximum_number_of_tasks_you_can_assign": {
    "qno": "2071",
    "title": "Maximum Number of Tasks You Can Assign",
    "tags": [
      "Array",
      "Binary Search",
      "Greedy",
      "Queue",
      "Sorting",
      "Monotonic Queue"
    ],
    "default": "Monotonic Queue",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 33.6
  },
  "longest_increasing_subsequence_ii": {
    "qno": "2407",
    "title": "Longest Increasing Subsequence II",
    "tags": [
      "Array",
      "Divide and Conquer",
      "Dynamic Programming",
      "Binary Indexed Tree",
      "Segment Tree",
      "Queue",
      "Monotonic Queue"
    ],
    "default": "Monotonic Queue",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 23.7
  },
  "count_subarrays_with_fixed_bounds": {
    "qno": "2444",
    "title": "Count Subarrays With Fixed Bounds",
    "tags": [
      "Array",
      "Queue",
      "Sliding Window",
      "Monotonic Queue"
    ],
    "default": "Monotonic Queue",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 68
  },
  "continuous_subarrays": {
    "qno": "2762",
    "title": "Continuous Subarrays",
    "tags": [
      "Array",
      "Queue",
      "Sliding Window",
      "Heap (Priority Queue)",
      "Ordered Set",
      "Monotonic Queue"
    ],
    "default": "Monotonic Queue",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 40.9
  },
  "minimum_number_of_coins_for_fruits": {
    "qno": "2944",
    "title": "Minimum Number of Coins for Fruits",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Queue",
      "Heap (Priority Queue)",
      "Monotonic Queue"
    ],
    "default": "Monotonic Queue",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 44.8
  },
  "find_maximum_non-decreasing_array_length": {
    "qno": "2945",
    "title": "Find Maximum Non-decreasing Array Length",
    "tags": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Stack",
      "Queue",
      "Monotonic Stack",
      "Monotonic Queue"
    ],
    "default": "Monotonic Queue",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 15.8
  },
  "minimum_number_of_coins_for_fruits_ii": {
    "qno": "2969",
    "title": "Minimum Number of Coins for Fruits II",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Queue",
      "Heap (Priority Queue)",
      "Monotonic Queue"
    ],
    "default": "Monotonic Queue",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 55.7
  },
  "longest_palindromic_substring": {
    "qno": "5",
    "title": "Longest Palindromic Substring",
    "tags": [
      "Two Pointers",
      "String",
      "Dynamic Programming"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 34
  },
  "container_with_most_water": {
    "qno": "11",
    "title": "Container With Most Water",
    "tags": [
      "Array",
      "Two Pointers",
      "Greedy"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 55.5
  },
  "3sum": {
    "qno": "15",
    "title": "3Sum",
    "tags": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 34.7
  },
  "3sum_closest": {
    "qno": "16",
    "title": "3Sum Closest",
    "tags": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 45.9
  },
  "4sum": {
    "qno": "18",
    "title": "4Sum",
    "tags": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 36.4
  },
  "remove_nth_node_from_end_of_list": {
    "qno": "19",
    "title": "Remove Nth Node From End of List",
    "tags": [
      "Linked List",
      "Two Pointers"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 45.7
  },
  "remove_duplicates_from_sorted_array": {
    "qno": "26",
    "title": "Remove Duplicates from Sorted Array",
    "tags": [
      "Array",
      "Two Pointers"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 56.3
  },
  "remove_element": {
    "qno": "27",
    "title": "Remove Element",
    "tags": [
      "Array",
      "Two Pointers"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 57.2
  },
  "find_the_index_of_the_first_occurrence_in_a_string": {
    "qno": "28",
    "title": "Find the Index of the First Occurrence in a String",
    "tags": [
      "Two Pointers",
      "String",
      "String Matching"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 42.7
  },
  "next_permutation": {
    "qno": "31",
    "title": "Next Permutation",
    "tags": [
      "Array",
      "Two Pointers"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 40.3
  },
  "trapping_rain_water": {
    "qno": "42",
    "title": "Trapping Rain Water",
    "tags": [
      "Array",
      "Two Pointers",
      "Dynamic Programming",
      "Stack",
      "Monotonic Stack"
    ],
    "default": "Two Pointers",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 62.3
  },
  "rotate_list": {
    "qno": "61",
    "title": "Rotate List",
    "tags": [
      "Linked List",
      "Two Pointers"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 38
  },
  "sort_colors": {
    "qno": "75",
    "title": "Sort Colors",
    "tags": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 63.9
  },
  "remove_duplicates_from_sorted_array_ii": {
    "qno": "80",
    "title": "Remove Duplicates from Sorted Array II",
    "tags": [
      "Array",
      "Two Pointers"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 58.9
  },
  "remove_duplicates_from_sorted_list_ii": {
    "qno": "82",
    "title": "Remove Duplicates from Sorted List II",
    "tags": [
      "Linked List",
      "Two Pointers"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 47.7
  },
  "partition_list": {
    "qno": "86",
    "title": "Partition List",
    "tags": [
      "Linked List",
      "Two Pointers"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 56.5
  },
  "merge_sorted_array": {
    "qno": "88",
    "title": "Merge Sorted Array",
    "tags": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 50
  },
  "valid_palindrome": {
    "qno": "125",
    "title": "Valid Palindrome",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 47.9
  },
  "linked_list_cycle": {
    "qno": "141",
    "title": "Linked List Cycle",
    "tags": [
      "Hash Table",
      "Linked List",
      "Two Pointers"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 50.6
  },
  "linked_list_cycle_ii": {
    "qno": "142",
    "title": "Linked List Cycle II",
    "tags": [
      "Hash Table",
      "Linked List",
      "Two Pointers"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 51.7
  },
  "reorder_list": {
    "qno": "143",
    "title": "Reorder List",
    "tags": [
      "Linked List",
      "Two Pointers",
      "Stack",
      "Recursion"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 59.1
  },
  "reverse_words_in_a_string": {
    "qno": "151",
    "title": "Reverse Words in a String",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 43.6
  },
  "intersection_of_two_linked_lists": {
    "qno": "160",
    "title": "Intersection of Two Linked Lists",
    "tags": [
      "Hash Table",
      "Linked List",
      "Two Pointers"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 57.9
  },
  "one_edit_distance": {
    "qno": "161",
    "title": "One Edit Distance",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 34.3
  },
  "compare_version_numbers": {
    "qno": "165",
    "title": "Compare Version Numbers",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 40.9
  },
  "two_sum_ii_-_input_array_is_sorted": {
    "qno": "167",
    "title": "Two Sum II - Input Array Is Sorted",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 61.5
  },
  "two_sum_iii_-_data_structure_design": {
    "qno": "170",
    "title": "Two Sum III - Data structure design",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Design",
      "Data Stream"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 38.1
  },
  "reverse_words_in_a_string_ii": {
    "qno": "186",
    "title": "Reverse Words in a String II",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 54.8
  },
  "rotate_array": {
    "qno": "189",
    "title": "Rotate Array",
    "tags": [
      "Array",
      "Math",
      "Two Pointers"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 40.8
  },
  "happy_number": {
    "qno": "202",
    "title": "Happy Number",
    "tags": [
      "Hash Table",
      "Math",
      "Two Pointers"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 56.3
  },
  "palindrome_linked_list": {
    "qno": "234",
    "title": "Palindrome Linked List",
    "tags": [
      "Linked List",
      "Two Pointers",
      "Stack",
      "Recursion"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 53.4
  },
  "shortest_word_distance_ii": {
    "qno": "244",
    "title": "Shortest Word Distance II",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "String",
      "Design"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 61.3
  },
  "strobogrammatic_number": {
    "qno": "246",
    "title": "Strobogrammatic Number",
    "tags": [
      "Hash Table",
      "Two Pointers",
      "String"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 47.7
  },
  "meeting_rooms_ii": {
    "qno": "253",
    "title": "Meeting Rooms II",
    "tags": [
      "Array",
      "Two Pointers",
      "Greedy",
      "Sorting",
      "Heap (Priority Queue)",
      "Prefix Sum"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 51.4
  },
  "3sum_smaller": {
    "qno": "259",
    "title": "3Sum Smaller",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 50.8
  },
  "closest_binary_search_tree_value_ii": {
    "qno": "272",
    "title": "Closest Binary Search Tree Value II",
    "tags": [
      "Two Pointers",
      "Stack",
      "Tree",
      "Depth-First Search",
      "Binary Search Tree",
      "Heap (Priority Queue)",
      "Binary Tree"
    ],
    "default": "Two Pointers",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 59.2
  },
  "find_the_celebrity": {
    "qno": "277",
    "title": "Find the Celebrity",
    "tags": [
      "Two Pointers",
      "Graph",
      "Interactive"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 47.4
  },
  "move_zeroes": {
    "qno": "283",
    "title": "Move Zeroes",
    "tags": [
      "Array",
      "Two Pointers"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 61.8
  },
  "find_the_duplicate_number": {
    "qno": "287",
    "title": "Find the Duplicate Number",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Bit Manipulation"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 61
  },
  "find_median_from_data_stream": {
    "qno": "295",
    "title": "Find Median from Data Stream",
    "tags": [
      "Two Pointers",
      "Design",
      "Sorting",
      "Heap (Priority Queue)",
      "Data Stream"
    ],
    "default": "Two Pointers",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 52
  },
  "create_maximum_number": {
    "qno": "321",
    "title": "Create Maximum Number",
    "tags": [
      "Array",
      "Two Pointers",
      "Stack",
      "Greedy",
      "Monotonic Stack"
    ],
    "default": "Two Pointers",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 30.3
  },
  "reverse_string": {
    "qno": "344",
    "title": "Reverse String",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 78.7
  },
  "reverse_vowels_of_a_string": {
    "qno": "345",
    "title": "Reverse Vowels of a String",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 53.4
  },
  "intersection_of_two_arrays": {
    "qno": "349",
    "title": "Intersection of Two Arrays",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 74.7
  },
  "intersection_of_two_arrays_ii": {
    "qno": "350",
    "title": "Intersection of Two Arrays II",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 56.6
  },
  "sort_transformed_array": {
    "qno": "360",
    "title": "Sort Transformed Array",
    "tags": [
      "Array",
      "Math",
      "Two Pointers",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 55.9
  },
  "is_subsequence": {
    "qno": "392",
    "title": "Is Subsequence",
    "tags": [
      "Two Pointers",
      "String",
      "Dynamic Programming"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 48
  },
  "valid_word_abbreviation": {
    "qno": "408",
    "title": "Valid Word Abbreviation",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 35.9
  },
  "string_compression": {
    "qno": "443",
    "title": "String Compression",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 54.8
  },
  "assign_cookies": {
    "qno": "455",
    "title": "Assign Cookies",
    "tags": [
      "Array",
      "Two Pointers",
      "Greedy",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 52.7
  },
  "circular_array_loop": {
    "qno": "457",
    "title": "Circular Array Loop",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 34.2
  },
  "heaters": {
    "qno": "475",
    "title": "Heaters",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 38
  },
  "magical_string": {
    "qno": "481",
    "title": "Magical String",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 51.4
  },
  "longest_uncommon_subsequence_ii": {
    "qno": "522",
    "title": "Longest Uncommon Subsequence II",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "String",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 41.7
  },
  "longest_word_in_dictionary_through_deleting": {
    "qno": "524",
    "title": "Longest Word in Dictionary through Deleting",
    "tags": [
      "Array",
      "Two Pointers",
      "String",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 51.2
  },
  "swapping_nodes_in_a_linked_list": {
    "qno": "1721",
    "title": "Swapping Nodes in a Linked List",
    "tags": [
      "Linked List",
      "Two Pointers"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 68
  },
  "k-diff_pairs_in_an_array": {
    "qno": "532",
    "title": "K-diff Pairs in an Array",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 43
  },
  "reverse_string_ii": {
    "qno": "541",
    "title": "Reverse String II",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 50.8
  },
  "next_greater_element_iii": {
    "qno": "556",
    "title": "Next Greater Element III",
    "tags": [
      "Math",
      "Two Pointers",
      "String"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 34.1
  },
  "reverse_words_in_a_string_iii": {
    "qno": "557",
    "title": "Reverse Words in a String III",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 83.1
  },
  "permutation_in_string": {
    "qno": "567",
    "title": "Permutation in String",
    "tags": [
      "Hash Table",
      "Two Pointers",
      "String",
      "Sliding Window"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 44.5
  },
  "shortest_unsorted_continuous_subarray": {
    "qno": "581",
    "title": "Shortest Unsorted Continuous Subarray",
    "tags": [
      "Array",
      "Two Pointers",
      "Stack",
      "Greedy",
      "Sorting",
      "Monotonic Stack"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 36.9
  },
  "valid_triangle_number": {
    "qno": "611",
    "title": "Valid Triangle Number",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Greedy",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 51.2
  },
  "sum_of_square_numbers": {
    "qno": "633",
    "title": "Sum of Square Numbers",
    "tags": [
      "Math",
      "Two Pointers",
      "Binary Search"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 36.7
  },
  "palindromic_substrings": {
    "qno": "647",
    "title": "Palindromic Substrings",
    "tags": [
      "Two Pointers",
      "String",
      "Dynamic Programming"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 70.3
  },
  "two_sum_iv_-_input_is_a_bst": {
    "qno": "653",
    "title": "Two Sum IV - Input is a BST",
    "tags": [
      "Hash Table",
      "Two Pointers",
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 61.3
  },
  "find_k_closest_elements": {
    "qno": "658",
    "title": "Find K Closest Elements",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sliding Window",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 47.5
  },
  "valid_palindrome_ii": {
    "qno": "680",
    "title": "Valid Palindrome II",
    "tags": [
      "Two Pointers",
      "String",
      "Greedy"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 40.9
  },
  "count_binary_substrings": {
    "qno": "696",
    "title": "Count Binary Substrings",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 65.6
  },
  "find_k-th_smallest_pair_distance": {
    "qno": "719",
    "title": "Find K-th Smallest Pair Distance",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 38.2
  },
  "candy_crush": {
    "qno": "723",
    "title": "Candy Crush",
    "tags": [
      "Array",
      "Two Pointers",
      "Matrix",
      "Simulation"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 76.9
  },
  "partition_labels": {
    "qno": "763",
    "title": "Partition Labels",
    "tags": [
      "Hash Table",
      "Two Pointers",
      "String",
      "Greedy"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 79.9
  },
  "swap_adjacent_in_lr_string": {
    "qno": "777",
    "title": "Swap Adjacent in LR String",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 36.8
  },
  "k-th_smallest_prime_fraction": {
    "qno": "786",
    "title": "K-th Smallest Prime Fraction",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 68.1
  },
  "number_of_subarrays_with_bounded_maximum": {
    "qno": "795",
    "title": "Number of Subarrays with Bounded Maximum",
    "tags": [
      "Array",
      "Two Pointers"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 53.2
  },
  "expressive_words": {
    "qno": "809",
    "title": "Expressive Words",
    "tags": [
      "Array",
      "Two Pointers",
      "String"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 46.2
  },
  "shortest_distance_to_a_character": {
    "qno": "821",
    "title": "Shortest Distance to a Character",
    "tags": [
      "Array",
      "Two Pointers",
      "String"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 71.6
  },
  "friends_of_appropriate_ages": {
    "qno": "825",
    "title": "Friends Of Appropriate Ages",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 47.7
  },
  "most_profit_assigning_work": {
    "qno": "826",
    "title": "Most Profit Assigning Work",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Greedy",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 55.9
  },
  "flipping_an_image": {
    "qno": "832",
    "title": "Flipping an Image",
    "tags": [
      "Array",
      "Two Pointers",
      "Bit Manipulation",
      "Matrix",
      "Simulation"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 82
  },
  "push_dominoes": {
    "qno": "838",
    "title": "Push Dominoes",
    "tags": [
      "Two Pointers",
      "String",
      "Dynamic Programming"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 57.2
  },
  "backspace_string_compare": {
    "qno": "844",
    "title": "Backspace String Compare",
    "tags": [
      "Two Pointers",
      "String",
      "Stack",
      "Simulation"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 49.2
  },
  "longest_mountain_in_array": {
    "qno": "845",
    "title": "Longest Mountain in Array",
    "tags": [
      "Array",
      "Two Pointers",
      "Dynamic Programming",
      "Enumeration"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 40.5
  },
  "advantage_shuffle": {
    "qno": "870",
    "title": "Advantage Shuffle",
    "tags": [
      "Array",
      "Two Pointers",
      "Greedy",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 52.6
  },
  "middle_of_the_linked_list": {
    "qno": "876",
    "title": "Middle of the Linked List",
    "tags": [
      "Linked List",
      "Two Pointers"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 78.7
  },
  "boats_to_save_people": {
    "qno": "881",
    "title": "Boats to Save People",
    "tags": [
      "Array",
      "Two Pointers",
      "Greedy",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 59.4
  },
  "sort_array_by_parity": {
    "qno": "905",
    "title": "Sort Array By Parity",
    "tags": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 76.2
  },
  "reverse_only_letters": {
    "qno": "917",
    "title": "Reverse Only Letters",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 64.8
  },
  "sort_array_by_parity_ii": {
    "qno": "922",
    "title": "Sort Array By Parity II",
    "tags": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 70.8
  },
  "3sum_with_multiplicity": {
    "qno": "923",
    "title": "3Sum With Multiplicity",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Sorting",
      "Counting"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 45.4
  },
  "long_pressed_name": {
    "qno": "925",
    "title": "Long Pressed Name",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 32.3
  },
  "di_string_match": {
    "qno": "942",
    "title": "DI String Match",
    "tags": [
      "Array",
      "Two Pointers",
      "String",
      "Greedy"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 78.8
  },
  "bag_of_tokens": {
    "qno": "948",
    "title": "Bag of Tokens",
    "tags": [
      "Array",
      "Two Pointers",
      "Greedy",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 59
  },
  "pancake_sorting": {
    "qno": "969",
    "title": "Pancake Sorting",
    "tags": [
      "Array",
      "Two Pointers",
      "Greedy",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 70.7
  },
  "squares_of_a_sorted_array": {
    "qno": "977",
    "title": "Squares of a Sorted Array",
    "tags": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 72.8
  },
  "interval_list_intersections": {
    "qno": "986",
    "title": "Interval List Intersections",
    "tags": [
      "Array",
      "Two Pointers"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 71.7
  },
  "shortest_way_to_form_string": {
    "qno": "1055",
    "title": "Shortest Way to Form String",
    "tags": [
      "Two Pointers",
      "String",
      "Greedy"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 60.3
  },
  "camelcase_matching": {
    "qno": "1023",
    "title": "Camelcase Matching",
    "tags": [
      "Array",
      "Two Pointers",
      "String",
      "Trie",
      "String Matching"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 62.3
  },
  "two_sum_less_than_k": {
    "qno": "1099",
    "title": "Two Sum Less Than K",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 61.8
  },
  "moving_stones_until_consecutive_ii": {
    "qno": "1040",
    "title": "Moving Stones Until Consecutive II",
    "tags": [
      "Array",
      "Math",
      "Two Pointers",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 56.7
  },
  "longest_string_chain": {
    "qno": "1048",
    "title": "Longest String Chain",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "String",
      "Dynamic Programming"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 61.1
  },
  "last_substring_in_lexicographical_order": {
    "qno": "1163",
    "title": "Last Substring in Lexicographical Order",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "default": "Two Pointers",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 34.5
  },
  "two_sum_bsts": {
    "qno": "1214",
    "title": "Two Sum BSTs",
    "tags": [
      "Two Pointers",
      "Binary Search",
      "Stack",
      "Tree",
      "Depth-First Search",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 67.2
  },
  "meeting_scheduler": {
    "qno": "1229",
    "title": "Meeting Scheduler",
    "tags": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 55
  },
  "duplicate_zeros": {
    "qno": "1089",
    "title": "Duplicate Zeros",
    "tags": [
      "Array",
      "Two Pointers"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 52
  },
  "longest_chunked_palindrome_decomposition": {
    "qno": "1147",
    "title": "Longest Chunked Palindrome Decomposition",
    "tags": [
      "Two Pointers",
      "String",
      "Dynamic Programming",
      "Greedy",
      "Rolling Hash",
      "Hash Function"
    ],
    "default": "Two Pointers",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 58.7
  },
  "minimum_number_of_moves_to_make_palindrome": {
    "qno": "2193",
    "title": "Minimum Number of Moves to Make Palindrome",
    "tags": [
      "Two Pointers",
      "String",
      "Greedy",
      "Binary Indexed Tree"
    ],
    "default": "Two Pointers",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 50.9
  },
  "find_positive_integer_solution_for_a_given_equation": {
    "qno": "1237",
    "title": "Find Positive Integer Solution for a Given Equation",
    "tags": [
      "Math",
      "Two Pointers",
      "Binary Search",
      "Interactive"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 69.7
  },
  "print_immutable_linked_list_in_reverse": {
    "qno": "1265",
    "title": "Print Immutable Linked List in Reverse",
    "tags": [
      "Linked List",
      "Two Pointers",
      "Stack",
      "Recursion"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 94
  },
  "remove_palindromic_subsequences": {
    "qno": "1332",
    "title": "Remove Palindromic Subsequences",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 76.4
  },
  "check_if_n_and_its_double_exist": {
    "qno": "1346",
    "title": "Check If N and Its Double Exist",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 37.2
  },
  "find_the_distance_value_between_two_arrays": {
    "qno": "1385",
    "title": "Find the Distance Value Between Two Arrays",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 68.5
  },
  "check_if_a_word_occurs_as_a_prefix_of_any_word_in_a_sentence": {
    "qno": "1455",
    "title": "Check If a Word Occurs As a Prefix of Any Word in a Sentence",
    "tags": [
      "Two Pointers",
      "String",
      "String Matching"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 64.3
  },
  "the_k_strongest_values_in_an_array": {
    "qno": "1471",
    "title": "The k Strongest Values in an Array",
    "tags": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 61.3
  },
  "range_sum_of_sorted_subarray_sums": {
    "qno": "1508",
    "title": "Range Sum of Sorted Subarray Sums",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 58.4
  },
  "number_of_subsequences_that_satisfy_the_given_sum_condition": {
    "qno": "1498",
    "title": "Number of Subsequences That Satisfy the Given Sum Condition",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 43.8
  },
  "get_the_maximum_score": {
    "qno": "1537",
    "title": "Get the Maximum Score",
    "tags": [
      "Array",
      "Two Pointers",
      "Dynamic Programming",
      "Greedy"
    ],
    "default": "Two Pointers",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 39.5
  },
  "shortest_subarray_to_be_removed_to_make_array_sorted": {
    "qno": "1574",
    "title": "Shortest Subarray to be Removed to Make Array Sorted",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Stack",
      "Monotonic Stack"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 37.9
  },
  "number_of_ways_where_square_of_number_is_equal_to_product_of_two_numbers": {
    "qno": "1577",
    "title": "Number of Ways Where Square of Number Is Equal to Product of Two Numbers",
    "tags": [
      "Array",
      "Hash Table",
      "Math",
      "Two Pointers"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 41.2
  },
  "dot_product_of_two_sparse_vectors": {
    "qno": "1570",
    "title": "Dot Product of Two Sparse Vectors",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Design"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 89.8
  },
  "split_two_strings_to_make_palindrome": {
    "qno": "1616",
    "title": "Split Two Strings to Make Palindrome",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 31.1
  },
  "add_two_polynomials_represented_as_linked_lists": {
    "qno": "1634",
    "title": "Add Two Polynomials Represented as Linked Lists",
    "tags": [
      "Linked List",
      "Math",
      "Two Pointers"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 55.5
  },
  "lowest_common_ancestor_of_a_binary_tree_iii": {
    "qno": "1650",
    "title": "Lowest Common Ancestor of a Binary Tree III",
    "tags": [
      "Hash Table",
      "Two Pointers",
      "Tree",
      "Binary Tree"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 79.9
  },
  "max_number_of_k-sum_pairs": {
    "qno": "1679",
    "title": "Max Number of K-Sum Pairs",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 55.1
  },
  "checking_existence_of_edge_length_limited_paths": {
    "qno": "1697",
    "title": "Checking Existence of Edge Length Limited Paths",
    "tags": [
      "Array",
      "Two Pointers",
      "Union Find",
      "Graph",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 62.4
  },
  "ways_to_split_array_into_three_subarrays": {
    "qno": "1712",
    "title": "Ways to Split Array Into Three Subarrays",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Prefix Sum"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 33
  },
  "minimum_length_of_string_after_deleting_similar_ends": {
    "qno": "1750",
    "title": "Minimum Length of String After Deleting Similar Ends",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 56
  },
  "form_array_by_concatenating_subarrays_of_another_array": {
    "qno": "1764",
    "title": "Form Array by Concatenating Subarrays of Another Array",
    "tags": [
      "Array",
      "Two Pointers",
      "Greedy",
      "String Matching"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 53.5
  },
  "largest_merge_of_two_strings": {
    "qno": "1754",
    "title": "Largest Merge Of Two Strings",
    "tags": [
      "Two Pointers",
      "String",
      "Greedy"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 48.2
  },
  "closest_subsequence_sum": {
    "qno": "1755",
    "title": "Closest Subsequence Sum",
    "tags": [
      "Array",
      "Two Pointers",
      "Dynamic Programming",
      "Bit Manipulation",
      "Bitmask"
    ],
    "default": "Two Pointers",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 39.2
  },
  "count_pairs_of_nodes": {
    "qno": "1782",
    "title": "Count Pairs Of Nodes",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Graph",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 40.1
  },
  "merge_strings_alternately": {
    "qno": "1768",
    "title": "Merge Strings Alternately",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 80
  },
  "maximum_score_of_a_good_subarray": {
    "qno": "1793",
    "title": "Maximum Score of a Good Subarray",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Stack",
      "Monotonic Stack"
    ],
    "default": "Two Pointers",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 64.3
  },
  "sentence_similarity_iii": {
    "qno": "1813",
    "title": "Sentence Similarity III",
    "tags": [
      "Array",
      "Two Pointers",
      "String"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 33.5
  },
  "rotating_the_box": {
    "qno": "1861",
    "title": "Rotating the Box",
    "tags": [
      "Array",
      "Two Pointers",
      "Matrix"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 67.5
  },
  "minimum_adjacent_swaps_to_reach_the_kth_smallest_number": {
    "qno": "1850",
    "title": "Minimum Adjacent Swaps to Reach the Kth Smallest Number",
    "tags": [
      "Two Pointers",
      "String",
      "Greedy"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 71.3
  },
  "faulty_sensor": {
    "qno": "1826",
    "title": "Faulty Sensor",
    "tags": [
      "Array",
      "Two Pointers"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 50
  },
  "maximum_distance_between_a_pair_of_values": {
    "qno": "1855",
    "title": "Maximum Distance Between a Pair of Values",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 53.5
  },
  "minimize_maximum_pair_sum_in_array": {
    "qno": "1877",
    "title": "Minimize Maximum Pair Sum in Array",
    "tags": [
      "Array",
      "Two Pointers",
      "Greedy",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 81.5
  },
  "sort_linked_list_already_sorted_using_absolute_values": {
    "qno": "2046",
    "title": "Sort Linked List Already Sorted Using Absolute Values",
    "tags": [
      "Linked List",
      "Two Pointers",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 67.1
  },
  "next_palindrome_using_same_digits": {
    "qno": "1842",
    "title": "Next Palindrome Using Same Digits",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "default": "Two Pointers",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 53.3
  },
  "product_of_two_run-length_encoded_arrays": {
    "qno": "1868",
    "title": "Product of Two Run-Length Encoded Arrays",
    "tags": [
      "Array",
      "Two Pointers"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 58.6
  },
  "maximum_number_of_removable_characters": {
    "qno": "1898",
    "title": "Maximum Number of Removable Characters",
    "tags": [
      "Array",
      "Two Pointers",
      "String",
      "Binary Search"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 43.7
  },
  "count_pairs_in_two_arrays": {
    "qno": "1885",
    "title": "Count Pairs in Two Arrays",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 60.9
  },
  "check_if_string_is_a_prefix_of_array": {
    "qno": "1961",
    "title": "Check If String Is a Prefix of Array",
    "tags": [
      "Array",
      "Two Pointers",
      "String"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 52.8
  },
  "minimum_number_of_swaps_to_make_the_string_balanced": {
    "qno": "1963",
    "title": "Minimum Number of Swaps to Make the String Balanced",
    "tags": [
      "Two Pointers",
      "String",
      "Stack",
      "Greedy"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 71.7
  },
  "reverse_prefix_of_word": {
    "qno": "2000",
    "title": "Reverse Prefix of Word",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 86.2
  },
  "partition_array_into_two_arrays_to_minimize_sum_difference": {
    "qno": "2035",
    "title": "Partition Array Into Two Arrays to Minimize Sum Difference",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Dynamic Programming",
      "Bit Manipulation",
      "Ordered Set",
      "Bitmask"
    ],
    "default": "Two Pointers",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 20.3
  },
  "delete_the_middle_node_of_a_linked_list": {
    "qno": "2095",
    "title": "Delete the Middle Node of a Linked List",
    "tags": [
      "Linked List",
      "Two Pointers"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 59.1
  },
  "watering_plants_ii": {
    "qno": "2105",
    "title": "Watering Plants II",
    "tags": [
      "Array",
      "Two Pointers",
      "Simulation"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 48.4
  },
  "find_first_palindromic_string_in_the_array": {
    "qno": "2108",
    "title": "Find First Palindromic String in the Array",
    "tags": [
      "Array",
      "Two Pointers",
      "String"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 83.9
  },
  "adding_spaces_to_a_string": {
    "qno": "2109",
    "title": "Adding Spaces to a String",
    "tags": [
      "Array",
      "Two Pointers",
      "String",
      "Simulation"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 58.9
  },
  "maximum_twin_sum_of_a_linked_list": {
    "qno": "2130",
    "title": "Maximum Twin Sum of a Linked List",
    "tags": [
      "Linked List",
      "Two Pointers",
      "Stack"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 80.9
  },
  "partition_array_according_to_given_pivot": {
    "qno": "2161",
    "title": "Partition Array According to Given Pivot",
    "tags": [
      "Array",
      "Two Pointers",
      "Simulation"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 84.9
  },
  "rearrange_array_elements_by_sign": {
    "qno": "2149",
    "title": "Rearrange Array Elements by Sign",
    "tags": [
      "Array",
      "Two Pointers",
      "Simulation"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 84.1
  },
  "find_all_k-distant_indices_in_an_array": {
    "qno": "2200",
    "title": "Find All K-Distant Indices in an Array",
    "tags": [
      "Array",
      "Two Pointers"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 65.8
  },
  "maximum_total_beauty_of_the_gardens": {
    "qno": "2234",
    "title": "Maximum Total Beauty of the Gardens",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Greedy",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 29.4
  },
  "successful_pairs_of_spells_and_potions": {
    "qno": "2300",
    "title": "Successful Pairs of Spells and Potions",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 43.1
  },
  "move_pieces_to_obtain_a_string": {
    "qno": "2337",
    "title": "Move Pieces to Obtain a String",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 47.6
  },
  "the_latest_time_to_catch_a_bus": {
    "qno": "2332",
    "title": "The Latest Time to Catch a Bus",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 27.1
  },
  "number_of_arithmetic_triplets": {
    "qno": "2367",
    "title": "Number of Arithmetic Triplets",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Enumeration"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 84.1
  },
  "valid_palindrome_iv": {
    "qno": "2330",
    "title": "Valid Palindrome IV",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 75.9
  },
  "strictly_palindromic_number": {
    "qno": "2396",
    "title": "Strictly Palindromic Number",
    "tags": [
      "Math",
      "Two Pointers",
      "Brainteaser"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 87.5
  },
  "divide_intervals_into_minimum_number_of_groups": {
    "qno": "2406",
    "title": "Divide Intervals Into Minimum Number of Groups",
    "tags": [
      "Array",
      "Two Pointers",
      "Greedy",
      "Sorting",
      "Heap (Priority Queue)",
      "Prefix Sum"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 47.1
  },
  "maximum_matching_of_players_with_trainers": {
    "qno": "2410",
    "title": "Maximum Matching of Players With Trainers",
    "tags": [
      "Array",
      "Two Pointers",
      "Greedy",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 63.2
  },
  "largest_positive_integer_that_exists_with_its_negative": {
    "qno": "2441",
    "title": "Largest Positive Integer That Exists With Its Negative",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 75.2
  },
  "apply_operations_to_an_array": {
    "qno": "2460",
    "title": "Apply Operations to an Array",
    "tags": [
      "Array",
      "Two Pointers",
      "Simulation"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 67.5
  },
  "total_cost_to_hire_k_workers": {
    "qno": "2462",
    "title": "Total Cost to Hire K Workers",
    "tags": [
      "Array",
      "Two Pointers",
      "Heap (Priority Queue)",
      "Simulation"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 43
  },
  "number_of_distinct_averages": {
    "qno": "2465",
    "title": "Number of Distinct Averages",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 57.9
  },
  "merge_operations_to_turn_array_into_a_palindrome": {
    "qno": "2422",
    "title": "Merge Operations to Turn Array Into a Palindrome",
    "tags": [
      "Array",
      "Two Pointers",
      "Greedy"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 69.4
  },
  "append_characters_to_string_to_make_subsequence": {
    "qno": "2486",
    "title": "Append Characters to String to Make Subsequence",
    "tags": [
      "Two Pointers",
      "String",
      "Greedy"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 73.1
  },
  "divide_players_into_teams_of_equal_skill": {
    "qno": "2491",
    "title": "Divide Players Into Teams of Equal Skill",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 59.8
  },
  "maximum_number_of_points_from_grid_queries": {
    "qno": "2503",
    "title": "Maximum Number of Points From Grid Queries",
    "tags": [
      "Array",
      "Two Pointers",
      "Breadth-First Search",
      "Union Find",
      "Sorting",
      "Heap (Priority Queue)",
      "Matrix"
    ],
    "default": "Two Pointers",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 37.4
  },
  "maximum_enemy_forts_that_can_be_captured": {
    "qno": "2511",
    "title": "Maximum Enemy Forts That Can Be Captured",
    "tags": [
      "Array",
      "Two Pointers"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 38.3
  },
  "minimum_common_value": {
    "qno": "2540",
    "title": "Minimum Common Value",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Binary Search"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 59.1
  },
  "maximize_greatness_of_an_array": {
    "qno": "2592",
    "title": "Maximize Greatness of an Array",
    "tags": [
      "Array",
      "Two Pointers",
      "Greedy",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 57.6
  },
  "minimum_time_to_eat_all_grains": {
    "qno": "2604",
    "title": "Minimum Time to Eat All Grains",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 41.4
  },
  "find_the_array_concatenation_value": {
    "qno": "2562",
    "title": "Find the Array Concatenation Value",
    "tags": [
      "Array",
      "Two Pointers",
      "Simulation"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 69.8
  },
  "count_the_number_of_fair_pairs": {
    "qno": "2563",
    "title": "Count the Number of Fair Pairs",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 32.8
  },
  "subsequence_with_the_minimum_score": {
    "qno": "2565",
    "title": "Subsequence With the Minimum Score",
    "tags": [
      "Two Pointers",
      "String",
      "Binary Search"
    ],
    "default": "Two Pointers",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 31.3
  },
  "merge_two_2d_arrays_by_summing_values": {
    "qno": "2570",
    "title": "Merge Two 2D Arrays by Summing Values",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 73.6
  },
  "find_the_maximum_number_of_marked_indices": {
    "qno": "2576",
    "title": "Find the Maximum Number of Marked Indices",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Greedy",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 38.5
  },
  "lexicographically_smallest_palindrome": {
    "qno": "2697",
    "title": "Lexicographically Smallest Palindrome",
    "tags": [
      "Two Pointers",
      "String",
      "Greedy"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 81.7
  },
  "split_a_circular_linked_list": {
    "qno": "2674",
    "title": "Split a Circular Linked List",
    "tags": [
      "Linked List",
      "Two Pointers"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 73.2
  },
  "minimum_changes_to_make_k_semi-palindromes": {
    "qno": "2911",
    "title": "Minimum Changes to Make K Semi-palindromes",
    "tags": [
      "Two Pointers",
      "String",
      "Dynamic Programming"
    ],
    "default": "Two Pointers",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 35.8
  },
  "count_pairs_whose_sum_is_less_than_target": {
    "qno": "2824",
    "title": "Count Pairs Whose Sum is Less than Target",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 87.2
  },
  "make_string_a_subsequence_using_cyclic_increments": {
    "qno": "2825",
    "title": "Make String a Subsequence Using Cyclic Increments",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 49.1
  },
  "minimum_array_length_after_pair_removals": {
    "qno": "2856",
    "title": "Minimum Array Length After Pair Removals",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Binary Search",
      "Greedy",
      "Counting"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 21.8
  },
  "maximum_coins_heroes_can_collect": {
    "qno": "2838",
    "title": "Maximum Coins Heroes Can Collect",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sorting",
      "Prefix Sum"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 68.9
  },
  "find_indices_with_index_and_value_difference_i": {
    "qno": "2903",
    "title": "Find Indices With Index and Value Difference I",
    "tags": [
      "Array",
      "Two Pointers"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 62
  },
  "find_indices_with_index_and_value_difference_ii": {
    "qno": "2905",
    "title": "Find Indices With Index and Value Difference II",
    "tags": [
      "Array",
      "Two Pointers"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 32.1
  },
  "the_wording_game": {
    "qno": "2868",
    "title": "The Wording Game",
    "tags": [
      "Array",
      "Math",
      "Two Pointers",
      "String",
      "Game Theory"
    ],
    "default": "Two Pointers",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 60.6
  },
  "separate_black_and_white_balls": {
    "qno": "2938",
    "title": "Separate Black and White Balls",
    "tags": [
      "Two Pointers",
      "String",
      "Greedy"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 53.1
  },
  "find_beautiful_indices_in_the_given_array_i": {
    "qno": "3006",
    "title": "Find Beautiful Indices in the Given Array I",
    "tags": [
      "Two Pointers",
      "String",
      "Binary Search",
      "Rolling Hash",
      "String Matching",
      "Hash Function"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 36.2
  },
  "count_the_number_of_incremovable_subarrays_ii": {
    "qno": "2972",
    "title": "Count the Number of Incremovable Subarrays II",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search"
    ],
    "default": "Two Pointers",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 39.1
  },
  "count_the_number_of_incremovable_subarrays_i": {
    "qno": "2970",
    "title": "Count the Number of Incremovable Subarrays I",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Enumeration"
    ],
    "default": "Two Pointers",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 51.2
  },
  "find_beautiful_indices_in_the_given_array_ii": {
    "qno": "3008",
    "title": "Find Beautiful Indices in the Given Array II",
    "tags": [
      "Two Pointers",
      "String",
      "Binary Search",
      "Rolling Hash",
      "String Matching",
      "Hash Function"
    ],
    "default": "Two Pointers",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 24.1
  },
  "find_the_integer_added_to_array_ii": {
    "qno": "3132",
    "title": "Find the Integer Added to Array II",
    "tags": [
      "Array",
      "Two Pointers",
      "Sorting",
      "Enumeration"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 31
  },
  "maximum_total_damage_with_spell_casting": {
    "qno": "3186",
    "title": "Maximum Total Damage With Spell Casting",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Binary Search",
      "Dynamic Programming",
      "Sorting",
      "Counting"
    ],
    "default": "Two Pointers",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 24.9
  },
  "longest_substring_without_repeating_characters": {
    "qno": "3",
    "title": "Longest Substring Without Repeating Characters",
    "tags": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 35
  },
  "substring_with_concatenation_of_all_words": {
    "qno": "30",
    "title": "Substring with Concatenation of All Words",
    "tags": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 32.6
  },
  "minimum_window_substring": {
    "qno": "76",
    "title": "Minimum Window Substring",
    "tags": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 43.2
  },
  "longest_substring_with_at_most_two_distinct_characters": {
    "qno": "159",
    "title": "Longest Substring with At Most Two Distinct Characters",
    "tags": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 55.5
  },
  "repeated_dna_sequences": {
    "qno": "187",
    "title": "Repeated DNA Sequences",
    "tags": [
      "Hash Table",
      "String",
      "Bit Manipulation",
      "Sliding Window",
      "Rolling Hash",
      "Hash Function"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 49.1
  },
  "minimum_size_subarray_sum": {
    "qno": "209",
    "title": "Minimum Size Subarray Sum",
    "tags": [
      "Array",
      "Binary Search",
      "Sliding Window",
      "Prefix Sum"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 47.3
  },
  "contains_duplicate_ii": {
    "qno": "219",
    "title": "Contains Duplicate II",
    "tags": [
      "Array",
      "Hash Table",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 45.5
  },
  "longest_substring_with_at_most_k_distinct_characters": {
    "qno": "340",
    "title": "Longest Substring with At Most K Distinct Characters",
    "tags": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 48.9
  },
  "longest_substring_with_at_least_k_repeating_characters": {
    "qno": "395",
    "title": "Longest Substring with At Least K Repeating Characters",
    "tags": [
      "Hash Table",
      "String",
      "Divide and Conquer",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 45
  },
  "longest_repeating_character_replacement": {
    "qno": "424",
    "title": "Longest Repeating Character Replacement",
    "tags": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 54.3
  },
  "find_all_anagrams_in_a_string": {
    "qno": "438",
    "title": "Find All Anagrams in a String",
    "tags": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 51
  },
  "sliding_window_median": {
    "qno": "480",
    "title": "Sliding Window Median",
    "tags": [
      "Array",
      "Hash Table",
      "Sliding Window",
      "Heap (Priority Queue)"
    ],
    "default": "Sliding Window",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 39.1
  },
  "max_consecutive_ones_ii": {
    "qno": "487",
    "title": "Max Consecutive Ones II",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 50.4
  },
  "longest_harmonious_subsequence": {
    "qno": "594",
    "title": "Longest Harmonious Subsequence",
    "tags": [
      "Array",
      "Hash Table",
      "Sliding Window",
      "Sorting",
      "Counting"
    ],
    "default": "Sliding Window",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 54.8
  },
  "smallest_range_covering_elements_from_k_lists": {
    "qno": "632",
    "title": "Smallest Range Covering Elements from K Lists",
    "tags": [
      "Array",
      "Hash Table",
      "Greedy",
      "Sliding Window",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "default": "Sliding Window",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 62.7
  },
  "maximum_average_subarray_i": {
    "qno": "643",
    "title": "Maximum Average Subarray I",
    "tags": [
      "Array",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 43.5
  },
  "k_empty_slots": {
    "qno": "683",
    "title": "K Empty Slots",
    "tags": [
      "Array",
      "Binary Indexed Tree",
      "Sliding Window",
      "Ordered Set"
    ],
    "default": "Sliding Window",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 37.1
  },
  "subarray_product_less_than_k": {
    "qno": "713",
    "title": "Subarray Product Less Than K",
    "tags": [
      "Array",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 51.5
  },
  "maximum_length_of_repeated_subarray": {
    "qno": "718",
    "title": "Maximum Length of Repeated Subarray",
    "tags": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Sliding Window",
      "Rolling Hash",
      "Hash Function"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 50.9
  },
  "minimum_window_subsequence": {
    "qno": "727",
    "title": "Minimum Window Subsequence",
    "tags": [
      "String",
      "Dynamic Programming",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 43.5
  },
  "fruit_into_baskets": {
    "qno": "904",
    "title": "Fruit Into Baskets",
    "tags": [
      "Array",
      "Hash Table",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 44.4
  },
  "binary_subarrays_with_sum": {
    "qno": "930",
    "title": "Binary Subarrays With Sum",
    "tags": [
      "Array",
      "Hash Table",
      "Sliding Window",
      "Prefix Sum"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 62.7
  },
  "longest_turbulent_subarray": {
    "qno": "978",
    "title": "Longest Turbulent Subarray",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 47.5
  },
  "subarrays_with_k_different_integers": {
    "qno": "992",
    "title": "Subarrays with K Different Integers",
    "tags": [
      "Array",
      "Hash Table",
      "Sliding Window",
      "Counting"
    ],
    "default": "Sliding Window",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 63.4
  },
  "minimum_number_of_k_consecutive_bit_flips": {
    "qno": "995",
    "title": "Minimum Number of K Consecutive Bit Flips",
    "tags": [
      "Array",
      "Bit Manipulation",
      "Queue",
      "Sliding Window",
      "Prefix Sum"
    ],
    "default": "Sliding Window",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 51.7
  },
  "max_consecutive_ones_iii": {
    "qno": "1004",
    "title": "Max Consecutive Ones III",
    "tags": [
      "Array",
      "Binary Search",
      "Sliding Window",
      "Prefix Sum"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 63.3
  },
  "find_k-length_substrings_with_no_repeated_characters": {
    "qno": "1100",
    "title": "Find K-Length Substrings With No Repeated Characters",
    "tags": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 74.7
  },
  "maximum_sum_of_two_non-overlapping_subarrays": {
    "qno": "1031",
    "title": "Maximum Sum of Two Non-Overlapping Subarrays",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 59.8
  },
  "minimum_swaps_to_group_all_1's_together": {
    "qno": "1151",
    "title": "Minimum Swaps to Group All 1's Together",
    "tags": [
      "Array",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 60.2
  },
  "grumpy_bookstore_owner": {
    "qno": "1052",
    "title": "Grumpy Bookstore Owner",
    "tags": [
      "Array",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 64.1
  },
  "swap_for_longest_repeated_character_substring": {
    "qno": "1156",
    "title": "Swap For Longest Repeated Character Substring",
    "tags": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 44.1
  },
  "diet_plan_performance": {
    "qno": "1176",
    "title": "Diet Plan Performance",
    "tags": [
      "Array",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 53.4
  },
  "get_equal_substrings_within_budget": {
    "qno": "1208",
    "title": "Get Equal Substrings Within Budget",
    "tags": [
      "String",
      "Binary Search",
      "Sliding Window",
      "Prefix Sum"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 58.3
  },
  "replace_the_substring_for_balanced_string": {
    "qno": "1234",
    "title": "Replace the Substring for Balanced String",
    "tags": [
      "String",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 38.4
  },
  "count_number_of_nice_subarrays": {
    "qno": "1248",
    "title": "Count Number of Nice Subarrays",
    "tags": [
      "Array",
      "Hash Table",
      "Math",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 66.4
  },
  "maximum_number_of_occurrences_of_a_substring": {
    "qno": "1297",
    "title": "Maximum Number of Occurrences of a Substring",
    "tags": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 52
  },
  "find_the_k-beauty_of_a_number": {
    "qno": "2269",
    "title": "Find the K-Beauty of a Number",
    "tags": [
      "Math",
      "String",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 59.9
  },
  "number_of_sub-arrays_of_size_k_and_average_greater_than_or_equal_to_threshold": {
    "qno": "1343",
    "title": "Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold",
    "tags": [
      "Array",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 68.5
  },
  "number_of_substrings_containing_all_three_characters": {
    "qno": "1358",
    "title": "Number of Substrings Containing All Three Characters",
    "tags": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 67
  },
  "maximum_points_you_can_obtain_from_cards": {
    "qno": "1423",
    "title": "Maximum Points You Can Obtain from Cards",
    "tags": [
      "Array",
      "Sliding Window",
      "Prefix Sum"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 53
  },
  "maximum_number_of_vowels_in_a_substring_of_given_length": {
    "qno": "1456",
    "title": "Maximum Number of Vowels in a Substring of Given Length",
    "tags": [
      "String",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 58.6
  },
  "find_two_non-overlapping_sub-arrays_each_with_target_sum": {
    "qno": "1477",
    "title": "Find Two Non-overlapping Sub-arrays Each With Target Sum",
    "tags": [
      "Array",
      "Hash Table",
      "Binary Search",
      "Dynamic Programming",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 36.5
  },
  "longest_subarray_of_1's_after_deleting_one_element": {
    "qno": "1493",
    "title": "Longest Subarray of 1's After Deleting One Element",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 67.5
  },
  "maximum_number_of_visible_points": {
    "qno": "1610",
    "title": "Maximum Number of Visible Points",
    "tags": [
      "Array",
      "Math",
      "Geometry",
      "Sliding Window",
      "Sorting"
    ],
    "default": "Sliding Window",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 37.4
  },
  "defuse_the_bomb": {
    "qno": "1652",
    "title": "Defuse the Bomb",
    "tags": [
      "Array",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 65.6
  },
  "minimum_operations_to_reduce_x_to_zero": {
    "qno": "1658",
    "title": "Minimum Operations to Reduce X to Zero",
    "tags": [
      "Array",
      "Hash Table",
      "Binary Search",
      "Sliding Window",
      "Prefix Sum"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 39.7
  },
  "minimum_adjacent_swaps_for_k_consecutive_ones": {
    "qno": "1703",
    "title": "Minimum Adjacent Swaps for K Consecutive Ones",
    "tags": [
      "Array",
      "Greedy",
      "Sliding Window",
      "Prefix Sum"
    ],
    "default": "Sliding Window",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 42.9
  },
  "maximum_erasure_value": {
    "qno": "1695",
    "title": "Maximum Erasure Value",
    "tags": [
      "Array",
      "Hash Table",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 58.3
  },
  "longest_nice_substring": {
    "qno": "1763",
    "title": "Longest Nice Substring",
    "tags": [
      "Hash Table",
      "String",
      "Divide and Conquer",
      "Bit Manipulation",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 60.6
  },
  "frequency_of_the_most_frequent_element": {
    "qno": "1838",
    "title": "Frequency of the Most Frequent Element",
    "tags": [
      "Array",
      "Binary Search",
      "Greedy",
      "Sliding Window",
      "Sorting",
      "Prefix Sum"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 44.7
  },
  "longest_substring_of_all_vowels_in_order": {
    "qno": "1839",
    "title": "Longest Substring Of All Vowels in Order",
    "tags": [
      "String",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 49.3
  },
  "substrings_of_size_three_with_distinct_characters": {
    "qno": "1876",
    "title": "Substrings of Size Three with Distinct Characters",
    "tags": [
      "Hash Table",
      "String",
      "Sliding Window",
      "Counting"
    ],
    "default": "Sliding Window",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 73.5
  },
  "jump_game_vii": {
    "qno": "1871",
    "title": "Jump Game VII",
    "tags": [
      "String",
      "Dynamic Programming",
      "Sliding Window",
      "Prefix Sum"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 24.9
  },
  "distinct_numbers_in_each_subarray": {
    "qno": "1852",
    "title": "Distinct Numbers in Each Subarray",
    "tags": [
      "Array",
      "Hash Table",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 71.3
  },
  "minimum_number_of_flips_to_make_the_binary_string_alternating": {
    "qno": "1888",
    "title": "Minimum Number of Flips to Make the Binary String Alternating",
    "tags": [
      "String",
      "Dynamic Programming",
      "Greedy",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 39.9
  },
  "kth_smallest_subarray_sum": {
    "qno": "1918",
    "title": "Kth Smallest Subarray Sum",
    "tags": [
      "Array",
      "Binary Search",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 52.8
  },
  "minimum_difference_between_highest_and_lowest_of_k_scores": {
    "qno": "1984",
    "title": "Minimum Difference Between Highest and Lowest of K Scores",
    "tags": [
      "Array",
      "Sliding Window",
      "Sorting"
    ],
    "default": "Sliding Window",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 56.8
  },
  "minimum_number_of_operations_to_make_array_continuous": {
    "qno": "2009",
    "title": "Minimum Number of Operations to Make Array Continuous",
    "tags": [
      "Array",
      "Hash Table",
      "Binary Search",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 52.8
  },
  "maximize_the_confusion_of_an_exam": {
    "qno": "2024",
    "title": "Maximize the Confusion of an Exam",
    "tags": [
      "String",
      "Binary Search",
      "Sliding Window",
      "Prefix Sum"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 67.2
  },
  "k_radius_subarray_averages": {
    "qno": "2090",
    "title": "K Radius Subarray Averages",
    "tags": [
      "Array",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 46.2
  },
  "maximum_fruits_harvested_after_at_most_k_steps": {
    "qno": "2106",
    "title": "Maximum Fruits Harvested After at Most K Steps",
    "tags": [
      "Array",
      "Binary Search",
      "Sliding Window",
      "Prefix Sum"
    ],
    "default": "Sliding Window",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 36.2
  },
  "number_of_unique_flavors_after_sharing_k_candies": {
    "qno": "2107",
    "title": "Number of Unique Flavors After Sharing K Candies",
    "tags": [
      "Array",
      "Hash Table",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 55.5
  },
  "minimum_swaps_to_group_all_1's_together_ii": {
    "qno": "2134",
    "title": "Minimum Swaps to Group All 1's Together II",
    "tags": [
      "Array",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 52.5
  },
  "find_substring_with_given_hash_value": {
    "qno": "2156",
    "title": "Find Substring With Given Hash Value",
    "tags": [
      "String",
      "Sliding Window",
      "Rolling Hash",
      "Hash Function"
    ],
    "default": "Sliding Window",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 23.5
  },
  "minimum_consecutive_cards_to_pick_up": {
    "qno": "2260",
    "title": "Minimum Consecutive Cards to Pick Up",
    "tags": [
      "Array",
      "Hash Table",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 51.3
  },
  "count_subarrays_with_score_less_than_k": {
    "qno": "2302",
    "title": "Count Subarrays With Score Less Than K",
    "tags": [
      "Array",
      "Binary Search",
      "Sliding Window",
      "Prefix Sum"
    ],
    "default": "Sliding Window",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 54.6
  },
  "maximum_number_of_robots_within_budget": {
    "qno": "2398",
    "title": "Maximum Number of Robots Within Budget",
    "tags": [
      "Array",
      "Binary Search",
      "Queue",
      "Sliding Window",
      "Heap (Priority Queue)",
      "Prefix Sum"
    ],
    "default": "Sliding Window",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 34.4
  },
  "minimum_recolors_to_get_k_consecutive_black_blocks": {
    "qno": "2379",
    "title": "Minimum Recolors to Get K Consecutive Black Blocks",
    "tags": [
      "String",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 58.8
  },
  "longest_nice_subarray": {
    "qno": "2401",
    "title": "Longest Nice Subarray",
    "tags": [
      "Array",
      "Bit Manipulation",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 51.4
  },
  "smallest_subarrays_with_maximum_bitwise_or": {
    "qno": "2411",
    "title": "Smallest Subarrays With Maximum Bitwise OR",
    "tags": [
      "Array",
      "Binary Search",
      "Bit Manipulation",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 44.1
  },
  "maximum_sum_of_distinct_subarrays_with_length_k": {
    "qno": "2461",
    "title": "Maximum Sum of Distinct Subarrays With Length K",
    "tags": [
      "Array",
      "Hash Table",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 34
  },
  "take_k_of_each_character_from_left_and_right": {
    "qno": "2516",
    "title": "Take K of Each Character From Left and Right",
    "tags": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 34.4
  },
  "maximize_the_minimum_powered_city": {
    "qno": "2528",
    "title": "Maximize the Minimum Powered City",
    "tags": [
      "Array",
      "Binary Search",
      "Greedy",
      "Queue",
      "Sliding Window",
      "Prefix Sum"
    ],
    "default": "Sliding Window",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 32.2
  },
  "count_the_number_of_good_subarrays": {
    "qno": "2537",
    "title": "Count the Number of Good Subarrays",
    "tags": [
      "Array",
      "Hash Table",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 50.5
  },
  "maximum_frequency_score_of_a_subarray": {
    "qno": "2524",
    "title": "Maximum Frequency Score of a Subarray",
    "tags": [
      "Array",
      "Hash Table",
      "Math",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 40.3
  },
  "maximize_win_from_two_segments": {
    "qno": "2555",
    "title": "Maximize Win From Two Segments",
    "tags": [
      "Array",
      "Binary Search",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 33
  },
  "sliding_subarray_beauty": {
    "qno": "2653",
    "title": "Sliding Subarray Beauty",
    "tags": [
      "Array",
      "Hash Table",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 33
  },
  "find_the_longest_semi-repetitive_substring": {
    "qno": "2730",
    "title": "Find the Longest Semi-Repetitive Substring",
    "tags": [
      "String",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 36.5
  },
  "find_the_longest_equal_subarray": {
    "qno": "2831",
    "title": "Find the Longest Equal Subarray",
    "tags": [
      "Array",
      "Hash Table",
      "Binary Search",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 35.6
  },
  "count_zero_request_servers": {
    "qno": "2747",
    "title": "Count Zero Request Servers",
    "tags": [
      "Array",
      "Hash Table",
      "Sliding Window",
      "Sorting"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 32.5
  },
  "count_complete_subarrays_in_an_array": {
    "qno": "2799",
    "title": "Count Complete Subarrays in an Array",
    "tags": [
      "Array",
      "Hash Table",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 64.8
  },
  "longest_even_odd_subarray_with_threshold": {
    "qno": "2760",
    "title": "Longest Even Odd Subarray With Threshold",
    "tags": [
      "Array",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 29.5
  },
  "length_of_the_longest_valid_substring": {
    "qno": "2781",
    "title": "Length of the Longest Valid Substring",
    "tags": [
      "Array",
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 37.4
  },
  "count_substrings_without_repeating_character": {
    "qno": "2743",
    "title": "Count Substrings Without Repeating Character",
    "tags": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 70.7
  },
  "maximum_beauty_of_an_array_after_applying_operation": {
    "qno": "2779",
    "title": "Maximum Beauty of an Array After Applying Operation",
    "tags": [
      "Array",
      "Binary Search",
      "Sliding Window",
      "Sorting"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 38
  },
  "maximum_sum_of_almost_unique_subarray": {
    "qno": "2841",
    "title": "Maximum Sum of Almost Unique Subarray",
    "tags": [
      "Array",
      "Hash Table",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 37.9
  },
  "count_of_sub-multisets_with_bounded_sum": {
    "qno": "2902",
    "title": "Count of Sub-Multisets With Bounded Sum",
    "tags": [
      "Array",
      "Hash Table",
      "Dynamic Programming",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 20.7
  },
  "minimum_size_subarray_in_infinite_array": {
    "qno": "2875",
    "title": "Minimum Size Subarray in Infinite Array",
    "tags": [
      "Array",
      "Hash Table",
      "Sliding Window",
      "Prefix Sum"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 30.8
  },
  "shortest_and_lexicographically_smallest_beautiful_string": {
    "qno": "2904",
    "title": "Shortest and Lexicographically Smallest Beautiful String",
    "tags": [
      "String",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 38.8
  },
  "maximum_strong_pair_xor_i": {
    "qno": "2932",
    "title": "Maximum Strong Pair XOR I",
    "tags": [
      "Array",
      "Hash Table",
      "Bit Manipulation",
      "Trie",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 76
  },
  "apply_operations_to_maximize_frequency_score": {
    "qno": "2968",
    "title": "Apply Operations to Maximize Frequency Score",
    "tags": [
      "Array",
      "Binary Search",
      "Sliding Window",
      "Sorting",
      "Prefix Sum"
    ],
    "default": "Sliding Window",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 39.1
  },
  "maximum_strong_pair_xor_ii": {
    "qno": "2935",
    "title": "Maximum Strong Pair XOR II",
    "tags": [
      "Array",
      "Hash Table",
      "Bit Manipulation",
      "Trie",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 30.1
  },
  "count_subarrays_where_max_element_appears_at_least_k_times": {
    "qno": "2962",
    "title": "Count Subarrays Where Max Element Appears at Least K Times",
    "tags": [
      "Array",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 59.1
  },
  "count_complete_substrings": {
    "qno": "2953",
    "title": "Count Complete Substrings",
    "tags": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 26.8
  },
  "length_of_longest_subarray_with_at_most_k_frequency": {
    "qno": "2958",
    "title": "Length of Longest Subarray With at Most K Frequency",
    "tags": [
      "Array",
      "Hash Table",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 55.8
  },
  "divide_an_array_into_subarrays_with_minimum_cost_ii": {
    "qno": "3013",
    "title": "Divide an Array Into Subarrays With Minimum Cost II",
    "tags": [
      "Array",
      "Hash Table",
      "Sliding Window",
      "Heap (Priority Queue)"
    ],
    "default": "Sliding Window",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 31.8
  },
  "find_longest_special_substring_that_occurs_thrice_ii": {
    "qno": "2982",
    "title": "Find Longest Special Substring That Occurs Thrice II",
    "tags": [
      "Hash Table",
      "String",
      "Binary Search",
      "Sliding Window",
      "Counting"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 33.9
  },
  "find_longest_special_substring_that_occurs_thrice_i": {
    "qno": "2981",
    "title": "Find Longest Special Substring That Occurs Thrice I",
    "tags": [
      "Hash Table",
      "String",
      "Binary Search",
      "Sliding Window",
      "Counting"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 42.7
  },
  "minimum_moves_to_pick_k_ones": {
    "qno": "3086",
    "title": "Minimum Moves to Pick K Ones",
    "tags": [
      "Array",
      "Greedy",
      "Sliding Window",
      "Prefix Sum"
    ],
    "default": "Sliding Window",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 23.8
  },
  "find_pattern_in_infinite_stream_i": {
    "qno": "3023",
    "title": "Find Pattern in Infinite Stream I",
    "tags": [
      "Array",
      "Sliding Window",
      "Rolling Hash",
      "String Matching",
      "Hash Function"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 59.8
  },
  "maximum_length_substring_with_two_occurrences": {
    "qno": "3090",
    "title": "Maximum Length Substring With Two Occurrences",
    "tags": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 63.9
  },
  "find_pattern_in_infinite_stream_ii": {
    "qno": "3037",
    "title": "Find Pattern in Infinite Stream II",
    "tags": [
      "Array",
      "Sliding Window",
      "Rolling Hash",
      "String Matching",
      "Hash Function"
    ],
    "default": "Sliding Window",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 70.2
  },
  "find_the_median_of_the_uniqueness_array": {
    "qno": "3134",
    "title": "Find the Median of the Uniqueness Array",
    "tags": [
      "Array",
      "Hash Table",
      "Binary Search",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 29
  },
  "shortest_subarray_with_or_at_least_k_ii": {
    "qno": "3097",
    "title": "Shortest Subarray With OR at Least K II",
    "tags": [
      "Array",
      "Bit Manipulation",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 29.9
  },
  "shortest_subarray_with_or_at_least_k_i": {
    "qno": "3095",
    "title": "Shortest Subarray With OR at Least K I",
    "tags": [
      "Array",
      "Bit Manipulation",
      "Sliding Window"
    ],
    "default": "Sliding Window",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 41
  },
  "equalize_strings_by_adding_or_removing_characters_at_ends": {
    "qno": "3135",
    "title": "Equalize Strings by Adding or Removing Characters at Ends",
    "tags": [
      "String",
      "Binary Search",
      "Dynamic Programming",
      "Sliding Window",
      "Hash Function"
    ],
    "default": "Sliding Window",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 57.5
  }
}