{
  "critical_connections_in_a_network": {
    "qno": 1192,
    "title": "Critical Connections in a Network",
    "tags": [
      "Depth-First Search",
      "Graph",
      "Biconnected Component"
    ],
    "default": "Biconnected Component",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 55.7
  },
  "implement_rand10()_using_rand7()": {
    "qno": 470,
    "title": "Implement Rand10() Using Rand7()",
    "tags": [
      "Math",
      "Rejection Sampling",
      "Randomized",
      "Probability and Statistics"
    ],
    "default": "Rejection Sampling",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 45.9
  },
  "generate_random_point_in_a_circle": {
    "qno": 478,
    "title": "Generate Random Point in a Circle",
    "tags": [
      "Math",
      "Geometry",
      "Rejection Sampling",
      "Randomized"
    ],
    "default": "Rejection Sampling",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 39.8
  },
  "maximum_gap": {
    "qno": 164,
    "title": "Maximum Gap",
    "tags": [
      "Array",
      "Sorting",
      "Bucket Sort",
      "Radix Sort"
    ],
    "default": "Radix Sort",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 46.1
  },
  "sort_an_array": {
    "qno": 912,
    "title": "Sort an Array",
    "tags": [
      "Array",
      "Divide and Conquer",
      "Sorting",
      "Heap (Priority Queue)",
      "Merge Sort",
      "Bucket Sort",
      "Radix Sort",
      "Counting Sort"
    ],
    "default": "Radix Sort",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 46.1
  },
  "query_kth_smallest_trimmed_number": {
    "qno": 2343,
    "title": "Query Kth Smallest Trimmed Number",
    "tags": [
      "Array",
      "String",
      "Divide and Conquer",
      "Sorting",
      "Heap (Priority Queue)",
      "Radix Sort",
      "Quickselect"
    ],
    "default": "Radix Sort",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 46.1
  },
  "reconstruct_itinerary": {
    "qno": 332,
    "title": "Reconstruct Itinerary",
    "tags": [
      "Depth-First Search",
      "Graph",
      "Eulerian Circuit"
    ],
    "default": "Eulerian Circuit",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 43.2
  },
  "cracking_the_safe": {
    "qno": 753,
    "title": "Cracking the Safe",
    "tags": [
      "Depth-First Search",
      "Graph",
      "Eulerian Circuit"
    ],
    "default": "Eulerian Circuit",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 56.9
  },
  "valid_arrangement_of_pairs": {
    "qno": 2097,
    "title": "Valid Arrangement of Pairs",
    "tags": [
      "Depth-First Search",
      "Graph",
      "Eulerian Circuit"
    ],
    "default": "Eulerian Circuit",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 43.2
  },
  "find_critical_and_pseudo-critical_edges_in_minimum_spanning_tree": {
    "qno": 1489,
    "title": "Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree",
    "tags": [
      "Union Find",
      "Graph",
      "Sorting",
      "Minimum Spanning Tree",
      "Strongly Connected Component"
    ],
    "default": "Strongly Connected Component",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 67.7
  },
  "minimum_number_of_days_to_disconnect_island": {
    "qno": 1568,
    "title": "Minimum Number of Days to Disconnect Island",
    "tags": [
      "Array",
      "Depth-First Search",
      "Breadth-First Search",
      "Matrix",
      "Strongly Connected Component"
    ],
    "default": "Strongly Connected Component",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 45.0
  },
  "minimum_edge_weight_equilibrium_queries_in_a_tree": {
    "qno": 2846,
    "title": "Minimum Edge Weight Equilibrium Queries in a Tree",
    "tags": [
      "Array",
      "Tree",
      "Graph",
      "Strongly Connected Component"
    ],
    "default": "Strongly Connected Component",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 43.8
  },
  "linked_list_random_node": {
    "qno": 382,
    "title": "Linked List Random Node",
    "tags": [
      "Linked List",
      "Math",
      "Reservoir Sampling",
      "Randomized"
    ],
    "default": "Reservoir Sampling",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 63.2
  },
  "random_pick_index": {
    "qno": 398,
    "title": "Random Pick Index",
    "tags": [
      "Hash Table",
      "Math",
      "Reservoir Sampling",
      "Randomized"
    ],
    "default": "Reservoir Sampling",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 63.4
  },
  "random_flip_matrix": {
    "qno": 519,
    "title": "Random Flip Matrix",
    "tags": [
      "Hash Table",
      "Math",
      "Reservoir Sampling",
      "Randomized"
    ],
    "default": "Reservoir Sampling",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 41.9
  },
  "random_point_in_non-overlapping_rectangles": {
    "qno": 497,
    "title": "Random Point in Non-overlapping Rectangles",
    "tags": [
      "Array",
      "Math",
      "Binary Search",
      "Reservoir Sampling",
      "Prefix Sum",
      "Ordered Set",
      "Randomized"
    ],
    "default": "Reservoir Sampling",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 40.0
  },
  "the_skyline_problem": {
    "qno": 218,
    "title": "The Skyline Problem",
    "tags": [
      "Array",
      "Divide and Conquer",
      "Binary Indexed Tree",
      "Segment Tree",
      "Line Sweep",
      "Heap (Priority Queue)",
      "Ordered Set"
    ],
    "default": "Line Sweep",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 42.7
  },
  "perfect_rectangle": {
    "qno": 391,
    "title": "Perfect Rectangle",
    "tags": [
      "Array",
      "Line Sweep"
    ],
    "default": "Line Sweep",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 33.8
  },
  "rectangle_area_ii": {
    "qno": 850,
    "title": "Rectangle Area II",
    "tags": [
      "Array",
      "Segment Tree",
      "Line Sweep"
    ],
    "default": "Line Sweep",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 54.2
  },
  "minimum_interval_to_include_each_query": {
    "qno": 1851,
    "title": "Minimum Interval to Include Each Query",
    "tags": [
      "Ordered Set",
      "Array",
      "Binary Search",
      "Line Sweep",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "default": "Line Sweep",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 49.6
  },
  "word_frequency": {
    "qno": 192,
    "title": "Word Frequency",
    "tags": [
      "Shell"
    ],
    "default": "Shell",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 25.8
  },
  "valid_phone_numbers": {
    "qno": 193,
    "title": "Valid Phone Numbers",
    "tags": [
      "Shell"
    ],
    "default": "Shell",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 26.1
  },
  "transpose_file": {
    "qno": 194,
    "title": "Transpose File",
    "tags": [
      "Shell"
    ],
    "default": "Shell",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 26.4
  },
  "tenth_line": {
    "qno": 195,
    "title": "Tenth Line",
    "tags": [
      "Shell"
    ],
    "default": "Shell",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 33.8
  },
  "h-index": {
    "qno": 274,
    "title": "H-Index",
    "tags": ["Array", "Sorting", "Counting Sort"],
    "default": "Counting Sort",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 39.0
  },
  "array_partition": {
    "qno": 561,
    "title": "Array Partition",
    "tags": ["Array", "Greedy", "Sorting", "Counting Sort"],
    "default": "Counting Sort",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 78.9
  },
  "height_checker": {
    "qno": 1051,
    "title": "Height Checker",
    "tags": ["Array", "Divide and Conquer", "Sorting", "Heap (Priority Queue)", "Merge Sort", "Bucket Sort", "Radix Sort", "Counting Sort"],
    "default": "Counting Sort",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 80.6
  },
  "relative_sort_array": {
    "qno": 1122,
    "title": "Relative Sort Array",
    "tags": ["Array", "Hash Table", "Sorting", "Counting Sort"],
    "default": "Counting Sort",
    "difficulty": "Easy",
    "language": "Java",
    "acceptance": 74.6
  },
  "connecting_cities_with_minimum_cost": {
    "qno": 1135,
    "title": "Connecting Cities With Minimum Cost",
    "tags": ["Union Find", "Graph", "Heap (Priority Queue)", "Minimum Spanning Tree"],
    "default": "Minimum Spanning Tree",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 62.0
  },
  "optimize_water_distribution_in_a_village": {
    "qno": 1168,
    "title": "Optimize Water Distribution in a Village",
    "tags": ["Union Find", "Graph", "Heap (Priority Queue)", "Minimum Spanning Tree"],
    "default": "Minimum Spanning Tree",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 64.8
  },
  "min_cost_to_connect_all_points": {
    "qno": 1584,
    "title": "Min Cost to Connect All Points",
    "tags": ["Array", "Union Find", "Graph", "Minimum Spanning Tree"],
    "default": "Minimum Spanning Tree",
    "difficulty": "Medium",
    "language": "Java",
    "acceptance": 67.0
  },
  "checking_existence_of_edge_length_limited_paths_ii": {
    "qno": 1724,
    "title": "Checking Existence of Edge Length Limited Paths II",
    "tags": ["Union Find", "Graph", "Minimum Spanning Tree"],
    "default": "Minimum Spanning Tree",
    "difficulty": "Hard",
    "language": "Java",
    "acceptance": 51.6
  }
}